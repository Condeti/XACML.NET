/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is www.com code.
 *
 * The Initial Developer of the Original Code is
 * Lagash Systems SA.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Diego Gonzalez <diegog@com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
using System;
using System.IO;
using System.Reflection;
using System.Xml;

using Xacml.Core; 
using Xacml.Core.Policy;
using Xacml.Core.Context;
using Xacml.Core.Runtime;

using NUnit.Framework;

namespace Xacml.Core.UnitTest.V1
{
	namespace MandatoryToImplementFunctionalityTests 
	{
		class Utility
		{
			public static void TestResponseElement( ResponseElement res )
			{
				MemoryStream ms = new MemoryStream();
				XmlTextWriter tw = new XmlTextWriter( ms, System.Text.Encoding.ASCII );
				res.WriteDocument( tw );
				tw.Flush();
				ms.Position = 0;
				ContextDocument cd = new ContextDocument( new XmlTextReader( ms ), XacmlVersion.Version11 );
			}
		}

		/// <summary>
		/// In order to execute the NUnit tests all the ConformanceTests must be in the same folder of the DLL.
		/// </summary>
		[TestFixture]
		public class AttributeReferences
		{
			public AttributeReferences()
			{
			}

			[Test]
			public void IIA001 ()
			{
				string[] files = new string[] { "1.IIA001Policy.xml", "1.IIA001Request.xml", "1.IIA001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
				
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );
				}
			}

			[Test]
			public void IIA002 ()
			{
				string[] files = new string[] { "1.IIA002Policy.xml", "1.IIA002Request.xml", "1.IIA002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read  ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			//IIA002Special.txt
			[Test]
			public void IIA003 ()
			{
				string[] files = new string[] { "1.IIA003Policy.xml", "1.IIA003Request.xml", "1.IIA003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA004 ()
			{
				string[] files = new string[] { "1.IIA004Policy.xml", "1.IIA004Request.xml", "1.IIA004Response.xml" }; 
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			//IIA004Special.txt
			[Test]
			public void IIA005 ()
			{
				string[] files = new string[] { "1.IIA005Policy.xml", "1.IIA005Request.xml", "1.IIA005Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA006 ()
			{
				string[] files = new string[] { "1.IIA006Policy.xml", "1.IIA006Request.xml", "1.IIA006Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA007 ()
			{
				string[] files = new string[] { "1.IIA007Policy.xml", "1.IIA007Request.xml", "1.IIA007Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA008 ()
			{
				string[] files = new string[] { "1.IIA008Policy.xml", "1.IIA008Request.xml", "1.IIA008Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA009 ()
			{
				string[] files = new string[] { "1.IIA009Policy.xml", "1.IIA009Request.xml", "1.IIA009Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA010 ()
			{
				string[] files = new string[] { "1.IIA010Policy.xml", "1.IIA010Request.xml", "1.IIA010Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA011 ()
			{
				string[] files = new string[] { "1.IIA011Policy.xml", "1.IIA011Request.xml", "1.IIA011Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA012 ()
			{
				string[] files = new string[] { "1.IIA012Policy.xml", "1.IIA012Request.xml", "1.IIA012Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA013 ()
			{
				string[] files = new string[] { "1.IIA013Policy.xml", "1.IIA013Request.xml", "1.IIA013Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA014 ()
			{
				string[] files = new string[] { "1.IIA014Policy.xml", "1.IIA014Request.xml", "1.IIA014Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA015 ()
			{
				string[] files = new string[] { "1.IIA015Policy.xml", "1.IIA015Request.xml", "1.IIA015Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA016 ()
			{
				string[] files = new string[] { "1.IIA016Policy.xml", "1.IIA016Request.xml", "1.IIA016Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA017 ()
			{
				string[] files = new string[] { "1.IIA017Policy.xml", "1.IIA017Request.xml", "1.IIA017Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine( true );
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA018 ()
			{
				string[] files = new string[] { "1.IIA018Policy.xml", "1.IIA018Request.xml", "1.IIA018Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA019 ()
			{
				string[] files = new string[] { "1.IIA019Policy.xml", "1.IIA019Request.xml", "1.IIA019Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA020 ()
			{
				string[] files = new string[] { "1.IIA020Policy.xml", "1.IIA020Request.xml", "1.IIA020Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIA021 ()
			{
				string[] files = new string[] { "1.IIA021Policy.xml", "1.IIA021Request.xml", "1.IIA021Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
		}

		
		[TestFixture]
		public class TargetMatching
		{
			public TargetMatching()
			{
			}

			[Test]
			public void IIB001 ()
			{
				string[] files = new string[] { "1.IIB001Policy.xml", "1.IIB001Request.xml", "1.IIB001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB002 ()
			{
				string[] files = new string[] { "1.IIB002Policy.xml", "1.IIB002Request.xml", "1.IIB002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB003 ()
			{
				string[] files = new string[] { "1.IIB003Policy.xml", "1.IIB003Request.xml", "1.IIB003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB004 ()
			{
				string[] files = new string[] { "1.IIB004Policy.xml", "1.IIB004Request.xml", "1.IIB004Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB005 ()
			{
				string[] files = new string[] { "1.IIB005Policy.xml", "1.IIB005Request.xml", "1.IIB005Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB006 ()
			{
				string[] files = new string[] { "1.IIB006Policy.xml", "1.IIB006Request.xml", "1.IIB006Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB007 ()
			{
				string[] files = new string[] { "1.IIB007Policy.xml", "1.IIB007Request.xml", "1.IIB007Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB008 ()
			{
				string[] files = new string[] { "1.IIB008Policy.xml", "1.IIB008Request.xml", "1.IIB008Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB009 ()
			{
				string[] files = new string[] { "1.IIB009Policy.xml", "1.IIB009Request.xml", "1.IIB009Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB010 ()
			{
				string[] files = new string[] { "1.IIB010Policy.xml", "1.IIB010Request.xml", "1.IIB010Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB011 ()
			{
				string[] files = new string[] { "1.IIB011Policy.xml", "1.IIB011Request.xml", "1.IIB011Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB012 ()
			{
				string[] files = new string[] { "1.IIB012Policy.xml", "1.IIB012Request.xml", "1.IIB012Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB013 ()
			{
				string[] files = new string[] { "1.IIB013Policy.xml", "1.IIB013Request.xml", "1.IIB013Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB014 ()
			{
				string[] files = new string[] { "1.IIB014Policy.xml", "1.IIB014Request.xml", "1.IIB014Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB015 ()
			{
				string[] files = new string[] { "1.IIB015Policy.xml", "1.IIB015Request.xml", "1.IIB015Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB016 ()
			{
				string[] files = new string[] { "1.IIB016Policy.xml", "1.IIB016Request.xml", "1.IIB016Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB017 ()
			{
				string[] files = new string[] { "1.IIB017Policy.xml", "1.IIB017Request.xml", "1.IIB017Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB018 ()
			{
				string[] files = new string[] { "1.IIB018Policy.xml", "1.IIB018Request.xml", "1.IIB018Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB019 ()
			{
				string[] files = new string[] { "1.IIB019Policy.xml", "1.IIB019Request.xml", "1.IIB019Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB020 ()
			{
				string[] files = new string[] { "1.IIB020Policy.xml", "1.IIB020Request.xml", "1.IIB020Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB021 ()
			{
				string[] files = new string[] { "1.IIB021Policy.xml", "1.IIB021Request.xml", "1.IIB021Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB022 ()
			{
				string[] files = new string[] { "1.IIB022Policy.xml", "1.IIB022Request.xml", "1.IIB022Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB023 ()
			{
				string[] files = new string[] { "1.IIB023Policy.xml", "1.IIB023Request.xml", "1.IIB023Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB024 ()
			{
				string[] files = new string[] { "1.IIB024Policy.xml", "1.IIB024Request.xml", "1.IIB024Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB025 ()
			{
				string[] files = new string[] { "1.IIB025Policy.xml", "1.IIB025Request.xml", "1.IIB025Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB026 ()
			{
				string[] files = new string[] { "1.IIB026Policy.xml", "1.IIB026Request.xml", "1.IIB026Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB027 ()
			{
				string[] files = new string[] { "1.IIB027Policy.xml", "1.IIB027Request.xml", "1.IIB027Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB028 ()
			{
				string[] files = new string[] { "1.IIB028Policy.xml", "1.IIB028Request.xml", "1.IIB028Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB029 ()
			{
				string[] files = new string[] { "1.IIB029Policy.xml", "1.IIB029Request.xml", "1.IIB029Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB030 ()
			{
				string[] files = new string[] { "1.IIB030Policy.xml", "1.IIB030Request.xml", "1.IIB030Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB031 ()
			{
				string[] files = new string[] { "1.IIB031Policy.xml", "1.IIB031Request.xml", "1.IIB031Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB032 ()
			{
				string[] files = new string[] { "1.IIB032Policy.xml", "1.IIB032Request.xml", "1.IIB032Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB033 ()
			{
				string[] files = new string[] { "1.IIB033Policy.xml", "1.IIB033Request.xml", "1.IIB033Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB034 ()
			{
				string[] files = new string[] { "1.IIB034Policy.xml", "1.IIB034Request.xml", "1.IIB034Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB035 ()
			{
				string[] files = new string[] { "1.IIB035Policy.xml", "1.IIB035Request.xml", "1.IIB035Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB036 ()
			{
				string[] files = new string[] { "1.IIB036Policy.xml", "1.IIB036Request.xml", "1.IIB036Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB037 ()
			{
				string[] files = new string[] { "1.IIB037Policy.xml", "1.IIB037Request.xml", "1.IIB037Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB038 ()
			{
				string[] files = new string[] { "1.IIB038Policy.xml", "1.IIB038Request.xml", "1.IIB038Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB039 ()
			{
				string[] files = new string[] { "1.IIB039Policy.xml", "1.IIB039Request.xml", "1.IIB039Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB040 ()
			{
				string[] files = new string[] { "1.IIB040Policy.xml", "1.IIB040Request.xml", "1.IIB040Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB041 ()
			{
				string[] files = new string[] { "1.IIB041Policy.xml", "1.IIB041Request.xml", "1.IIB041Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB042 ()
			{
				string[] files = new string[] { "1.IIB042Policy.xml", "1.IIB042Request.xml", "1.IIB042Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB043 ()
			{
				string[] files = new string[] { "1.IIB043Policy.xml", "1.IIB043Request.xml", "1.IIB043Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB044 ()
			{
				string[] files = new string[] { "1.IIB044Policy.xml", "1.IIB044Request.xml", "1.IIB044Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB045 ()
			{
				string[] files = new string[] { "1.IIB045Policy.xml", "1.IIB045Request.xml", "1.IIB045Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB046 ()
			{
				string[] files = new string[] { "1.IIB046Policy.xml", "1.IIB046Request.xml", "1.IIB046Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB047 ()
			{
				string[] files = new string[] { "1.IIB047Policy.xml", "1.IIB047Request.xml", "1.IIB047Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB048 ()
			{
				string[] files = new string[] { "1.IIB048Policy.xml", "1.IIB048Request.xml", "1.IIB048Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 
			[Test]
			public void IIB049 ()
			{
				string[] files = new string[] { "1.IIB049Policy.xml", "1.IIB049Request.xml", "1.IIB049Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB050 ()
			{
				string[] files = new string[] { "1.IIB050Policy.xml", "1.IIB050Request.xml", "1.IIB050Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB051 ()
			{
				string[] files = new string[] { "1.IIB051Policy.xml", "1.IIB051Request.xml", "1.IIB051Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB052 ()
			{
				string[] files = new string[] { "1.IIB052Policy.xml", "1.IIB052Request.xml", "1.IIB052Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIB053 ()
			{
				string[] files = new string[] { "1.IIB053Policy.xml", "1.IIB053Request.xml", "1.IIB053Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 
		}


		[TestFixture]
		public class FunctionEvaluation
		{
			public FunctionEvaluation()
			{
			}


			[Test]
			public void IIC001 ()
			{
				string[] files = new string[] { "1.IIC001Policy.xml", "1.IIC001Request.xml", "1.IIC001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC002 ()
			{
				string[] files = new string[] { "1.IIC002Policy.xml", "1.IIC002Request.xml", "1.IIC002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC003 ()
			{
				string[] files = new string[] { "1.IIC003Policy.xml", "1.IIC003Request.xml", "1.IIC003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			//IIC003Special.txt
			[Test]
			public void IIC004 ()
			{
				string[] files = new string[] { "1.IIC004Policy.xml", "1.IIC004Request.xml", "1.IIC004Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC005 ()
			{
				string[] files = new string[] { "1.IIC005Policy.xml", "1.IIC005Request.xml", "1.IIC005Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC006 ()
			{
				string[] files = new string[] { "1.IIC006Policy.xml", "1.IIC006Request.xml", "1.IIC006Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC007 ()
			{
				string[] files = new string[] { "1.IIC007Policy.xml", "1.IIC007Request.xml", "1.IIC007Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC008 ()
			{
				string[] files = new string[] { "1.IIC008Policy.xml", "1.IIC008Request.xml", "1.IIC008Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC009 ()
			{
				string[] files = new string[] { "1.IIC009Policy.xml", "1.IIC009Request.xml", "1.IIC009Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
 

			[Test]
			public void IIC010 ()
			{
				string[] files = new string[] { "1.IIC010Policy.xml", "1.IIC010Request.xml", "1.IIC010Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					Utility.TestResponseElement( res );

				}
			}
			
			//TODO: Utility.TestResponseElement( res );

			[Test]
			public void IIC011 ()
			{
				string[] files = new string[] { "1.IIC011Policy.xml", "1.IIC011Request.xml", "1.IIC011Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC012 ()
			{
				string[] files = new string[] { "1.IIC012Policy.xml", "1.IIC012Request.xml", "1.IIC012Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			//IIC012Special.txt
			[Test]
			public void IIC013 ()
			{
				string[] files = new string[] { "1.IIC013Policy.xml", "1.IIC013Request.xml", "1.IIC013Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC014 ()
			{
				string[] files = new string[] { "1.IIC014Policy.xml", "1.IIC014Request.xml", "1.IIC014Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			//IIC014Special.txt
			[Test]
			public void IIC015 ()
			{
				string[] files = new string[] { "1.IIC015Policy.xml", "1.IIC015Request.xml", "1.IIC015Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC016 ()
			{
				string[] files = new string[] { "1.IIC016Policy.xml", "1.IIC016Request.xml", "1.IIC016Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC017 ()
			{
				string[] files = new string[] { "1.IIC017Policy.xml", "1.IIC017Request.xml", "1.IIC017Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC018 ()
			{
				string[] files = new string[] { "1.IIC018Policy.xml", "1.IIC018Request.xml", "1.IIC018Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC019 ()
			{
				string[] files = new string[] { "1.IIC019Policy.xml", "1.IIC019Request.xml", "1.IIC019Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC020 ()
			{
				string[] files = new string[] { "1.IIC020Policy.xml", "1.IIC020Request.xml", "1.IIC020Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC021 ()
			{
				string[] files = new string[] { "1.IIC021Policy.xml", "1.IIC021Request.xml", "1.IIC021Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC022 ()
			{
				string[] files = new string[] { "1.IIC022Policy.xml", "1.IIC022Request.xml", "1.IIC022Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC024 ()
			{
				string[] files = new string[] { "1.IIC024Policy.xml", "1.IIC024Request.xml", "1.IIC024Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC025 ()
			{
				string[] files = new string[] { "1.IIC025Policy.xml", "1.IIC025Request.xml", "1.IIC025Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC026 ()
			{
				string[] files = new string[] { "1.IIC026Policy.xml", "1.IIC026Request.xml", "1.IIC026Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC027 ()
			{
				string[] files = new string[] { "1.IIC027Policy.xml", "1.IIC027Request.xml", "1.IIC027Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC028 ()
			{
				string[] files = new string[] { "1.IIC028Policy.xml", "1.IIC028Request.xml", "1.IIC028Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC029 ()
			{
				string[] files = new string[] { "1.IIC029Policy.xml", "1.IIC029Request.xml", "1.IIC029Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC030 ()
			{
				string[] files = new string[] { "1.IIC030Policy.xml", "1.IIC030Request.xml", "1.IIC030Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC031 ()
			{
				string[] files = new string[] { "1.IIC031Policy.xml", "1.IIC031Request.xml", "1.IIC031Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC032 ()
			{
				string[] files = new string[] { "1.IIC032Policy.xml", "1.IIC032Request.xml", "1.IIC032Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC033 ()
			{
				string[] files = new string[] { "1.IIC033Policy.xml", "1.IIC033Request.xml", "1.IIC033Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC034 ()
			{
				string[] files = new string[] { "1.IIC034Policy.xml", "1.IIC034Request.xml", "1.IIC034Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC035 ()
			{
				string[] files = new string[] { "1.IIC035Policy.xml", "1.IIC035Request.xml", "1.IIC035Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC036 ()
			{
				string[] files = new string[] { "1.IIC036Policy.xml", "1.IIC036Request.xml", "1.IIC036Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC037 ()
			{
				string[] files = new string[] { "1.IIC037Policy.xml", "1.IIC037Request.xml", "1.IIC037Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC038 ()
			{
				string[] files = new string[] { "1.IIC038Policy.xml", "1.IIC038Request.xml", "1.IIC038Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC039 ()
			{
				string[] files = new string[] { "1.IIC039Policy.xml", "1.IIC039Request.xml", "1.IIC039Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC040 ()
			{
				string[] files = new string[] { "1.IIC040Policy.xml", "1.IIC040Request.xml", "1.IIC040Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC041 ()
			{
				string[] files = new string[] { "1.IIC041Policy.xml", "1.IIC041Request.xml", "1.IIC041Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC042 ()
			{
				string[] files = new string[] { "1.IIC042Policy.xml", "1.IIC042Request.xml", "1.IIC042Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC043 ()
			{
				string[] files = new string[] { "1.IIC043Policy.xml", "1.IIC043Request.xml", "1.IIC043Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC044 ()
			{
				string[] files = new string[] { "1.IIC044Policy.xml", "1.IIC044Request.xml", "1.IIC044Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC045 ()
			{
				string[] files = new string[] { "1.IIC045Policy.xml", "1.IIC045Request.xml", "1.IIC045Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC046 ()
			{
				string[] files = new string[] { "1.IIC046Policy.xml", "1.IIC046Request.xml", "1.IIC046Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC047 ()
			{
				string[] files = new string[] { "1.IIC047Policy.xml", "1.IIC047Request.xml", "1.IIC047Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC048 ()
			{
				string[] files = new string[] { "1.IIC048Policy.xml", "1.IIC048Request.xml", "1.IIC048Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC049 ()
			{
				string[] files = new string[] { "1.IIC049Policy.xml", "1.IIC049Request.xml", "1.IIC049Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC050 ()
			{
				string[] files = new string[] { "1.IIC050Policy.xml", "1.IIC050Request.xml", "1.IIC050Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC051 ()
			{
				string[] files = new string[] { "1.IIC051Policy.xml", "1.IIC051Request.xml", "1.IIC051Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC052 ()
			{
				string[] files = new string[] { "1.IIC052Policy.xml", "1.IIC052Request.xml", "1.IIC052Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC053 ()
			{
				string[] files = new string[] { "1.IIC053Policy.xml", "1.IIC053Request.xml", "1.IIC053Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC056 ()
			{
				string[] files = new string[] { "1.IIC056Policy.xml", "1.IIC056Request.xml", "1.IIC056Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC057 ()
			{
				string[] files = new string[] { "1.IIC057Policy.xml", "1.IIC057Request.xml", "1.IIC057Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC058 ()
			{
				string[] files = new string[] { "1.IIC058Policy.xml", "1.IIC058Request.xml", "1.IIC058Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC059 ()
			{
				string[] files = new string[] { "1.IIC059Policy.xml", "1.IIC059Request.xml", "1.IIC059Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC060 ()
			{
				string[] files = new string[] { "1.IIC060Policy.xml", "1.IIC060Request.xml", "1.IIC060Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC061 ()
			{
				string[] files = new string[] { "1.IIC061Policy.xml", "1.IIC061Request.xml", "1.IIC061Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC062 ()
			{
				string[] files = new string[] { "1.IIC062Policy.xml", "1.IIC062Request.xml", "1.IIC062Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC063 ()
			{
				string[] files = new string[] { "1.IIC063Policy.xml", "1.IIC063Request.xml", "1.IIC063Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC064 ()
			{
				string[] files = new string[] { "1.IIC064Policy.xml", "1.IIC064Request.xml", "1.IIC064Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC065 ()
			{
				string[] files = new string[] { "1.IIC065Policy.xml", "1.IIC065Request.xml", "1.IIC065Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC066 ()
			{
				string[] files = new string[] { "1.IIC066Policy.xml", "1.IIC066Request.xml", "1.IIC066Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC067 ()
			{
				string[] files = new string[] { "1.IIC067Policy.xml", "1.IIC067Request.xml", "1.IIC067Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC068 ()
			{
				string[] files = new string[] { "1.IIC068Policy.xml", "1.IIC068Request.xml", "1.IIC068Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC069 ()
			{
				string[] files = new string[] { "1.IIC069Policy.xml", "1.IIC069Request.xml", "1.IIC069Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC070 ()
			{
				string[] files = new string[] { "1.IIC070Policy.xml", "1.IIC070Request.xml", "1.IIC070Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC071 ()
			{
				string[] files = new string[] { "1.IIC071Policy.xml", "1.IIC071Request.xml", "1.IIC071Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC072 ()
			{
				string[] files = new string[] { "1.IIC072Policy.xml", "1.IIC072Request.xml", "1.IIC072Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC073 ()
			{
				string[] files = new string[] { "1.IIC073Policy.xml", "1.IIC073Request.xml", "1.IIC073Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC074 ()
			{
				string[] files = new string[] { "1.IIC074Policy.xml", "1.IIC074Request.xml", "1.IIC074Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC075 ()
			{
				string[] files = new string[] { "1.IIC075Policy.xml", "1.IIC075Request.xml", "1.IIC075Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC076 ()
			{
				string[] files = new string[] { "1.IIC076Policy.xml", "1.IIC076Request.xml", "1.IIC076Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC077 ()
			{
				string[] files = new string[] { "1.IIC077Policy.xml", "1.IIC077Request.xml", "1.IIC077Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC078 ()
			{
				string[] files = new string[] { "1.IIC078Policy.xml", "1.IIC078Request.xml", "1.IIC078Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC079 ()
			{
				string[] files = new string[] { "1.IIC079Policy.xml", "1.IIC079Request.xml", "1.IIC079Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC080 ()
			{
				string[] files = new string[] { "1.IIC080Policy.xml", "1.IIC080Request.xml", "1.IIC080Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC081 ()
			{
				string[] files = new string[] { "1.IIC081Policy.xml", "1.IIC081Request.xml", "1.IIC081Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC082 ()
			{
				string[] files = new string[] { "1.IIC082Policy.xml", "1.IIC082Request.xml", "1.IIC082Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC083 ()
			{
				string[] files = new string[] { "1.IIC083Policy.xml", "1.IIC083Request.xml", "1.IIC083Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC084 ()
			{
				string[] files = new string[] { "1.IIC084Policy.xml", "1.IIC084Request.xml", "1.IIC084Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC085 ()
			{
				string[] files = new string[] { "1.IIC085Policy.xml", "1.IIC085Request.xml", "1.IIC085Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC086 ()
			{
				string[] files = new string[] { "1.IIC086Policy.xml", "1.IIC086Request.xml", "1.IIC086Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC087 ()
			{
				string[] files = new string[] { "1.IIC087Policy.xml", "1.IIC087Request.xml", "1.IIC087Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC090 ()
			{
				string[] files = new string[] { "1.IIC090Policy.xml", "1.IIC090Request.xml", "1.IIC090Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC091 ()
			{
				string[] files = new string[] { "1.IIC091Policy.xml", "1.IIC091Request.xml", "1.IIC091Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC094 ()
			{
				string[] files = new string[] { "1.IIC094Policy.xml", "1.IIC094Request.xml", "1.IIC094Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC095 ()
			{
				string[] files = new string[] { "1.IIC095Policy.xml", "1.IIC095Request.xml", "1.IIC095Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC096 ()
			{
				string[] files = new string[] { "1.IIC096Policy.xml", "1.IIC096Request.xml", "1.IIC096Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC097 ()
			{
				string[] files = new string[] { "1.IIC097Policy.xml", "1.IIC097Request.xml", "1.IIC097Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC100 ()
			{
				string[] files = new string[] { "1.IIC100Policy.xml", "1.IIC100Request.xml", "1.IIC100Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC101 ()
			{
				string[] files = new string[] { "1.IIC101Policy.xml", "1.IIC101Request.xml", "1.IIC101Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC102 ()
			{
				string[] files = new string[] { "1.IIC102Policy.xml", "1.IIC102Request.xml", "1.IIC102Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC103 ()
			{
				string[] files = new string[] { "1.IIC103Policy.xml", "1.IIC103Request.xml", "1.IIC103Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC104 ()
			{
				string[] files = new string[] { "1.IIC104Policy.xml", "1.IIC104Request.xml", "1.IIC104Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC105 ()
			{
				string[] files = new string[] { "1.IIC105Policy.xml", "1.IIC105Request.xml", "1.IIC105Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC106 ()
			{
				string[] files = new string[] { "1.IIC106Policy.xml", "1.IIC106Request.xml", "1.IIC106Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC107 ()
			{
				string[] files = new string[] { "1.IIC107Policy.xml", "1.IIC107Request.xml", "1.IIC107Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC108 ()
			{
				string[] files = new string[] { "1.IIC108Policy.xml", "1.IIC108Request.xml", "1.IIC108Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC109 ()
			{
				string[] files = new string[] { "1.IIC109Policy.xml", "1.IIC109Request.xml", "1.IIC109Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC110 ()
			{
				string[] files = new string[] { "1.IIC110Policy.xml", "1.IIC110Request.xml", "1.IIC110Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC111 ()
			{
				string[] files = new string[] { "1.IIC111Policy.xml", "1.IIC111Request.xml", "1.IIC111Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC112 ()
			{
				string[] files = new string[] { "1.IIC112Policy.xml", "1.IIC112Request.xml", "1.IIC112Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC113 ()
			{
				string[] files = new string[] { "1.IIC113Policy.xml", "1.IIC113Request.xml", "1.IIC113Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC114 ()
			{
				string[] files = new string[] { "1.IIC114Policy.xml", "1.IIC114Request.xml", "1.IIC114Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC115 ()
			{
				string[] files = new string[] { "1.IIC115Policy.xml", "1.IIC115Request.xml", "1.IIC115Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC116 ()
			{
				string[] files = new string[] { "1.IIC116Policy.xml", "1.IIC116Request.xml", "1.IIC116Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC117 ()
			{
				string[] files = new string[] { "1.IIC117Policy.xml", "1.IIC117Request.xml", "1.IIC117Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC118 ()
			{
				string[] files = new string[] { "1.IIC118Policy.xml", "1.IIC118Request.xml", "1.IIC118Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC119 ()
			{
				string[] files = new string[] { "1.IIC119Policy.xml", "1.IIC119Request.xml", "1.IIC119Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC120 ()
			{
				string[] files = new string[] { "1.IIC120Policy.xml", "1.IIC120Request.xml", "1.IIC120Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC121 ()
			{
				string[] files = new string[] { "1.IIC121Policy.xml", "1.IIC121Request.xml", "1.IIC121Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC122 ()
			{
				string[] files = new string[] { "1.IIC122Policy.xml", "1.IIC122Request.xml", "1.IIC122Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC123 ()
			{
				string[] files = new string[] { "1.IIC123Policy.xml", "1.IIC123Request.xml", "1.IIC123Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC124 ()
			{
				string[] files = new string[] { "1.IIC124Policy.xml", "1.IIC124Request.xml", "1.IIC124Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC125 ()
			{
				string[] files = new string[] { "1.IIC125Policy.xml", "1.IIC125Request.xml", "1.IIC125Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC126 ()
			{
				string[] files = new string[] { "1.IIC126Policy.xml", "1.IIC126Request.xml", "1.IIC126Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC127 ()
			{
				string[] files = new string[] { "1.IIC127Policy.xml", "1.IIC127Request.xml", "1.IIC127Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC128 ()
			{
				string[] files = new string[] { "1.IIC128Policy.xml", "1.IIC128Request.xml", "1.IIC128Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC129 ()
			{
				string[] files = new string[] { "1.IIC129Policy.xml", "1.IIC129Request.xml", "1.IIC129Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC130 ()
			{
				string[] files = new string[] { "1.IIC130Policy.xml", "1.IIC130Request.xml", "1.IIC130Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC131 ()
			{
				string[] files = new string[] { "1.IIC131Policy.xml", "1.IIC131Request.xml", "1.IIC131Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC132 ()
			{
				string[] files = new string[] { "1.IIC132Policy.xml", "1.IIC132Request.xml", "1.IIC132Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC133 ()
			{
				string[] files = new string[] { "1.IIC133Policy.xml", "1.IIC133Request.xml", "1.IIC133Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC134 ()
			{
				string[] files = new string[] { "1.IIC134Policy.xml", "1.IIC134Request.xml", "1.IIC134Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC135 ()
			{
				string[] files = new string[] { "1.IIC135Policy.xml", "1.IIC135Request.xml", "1.IIC135Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC136 ()
			{
				string[] files = new string[] { "1.IIC136Policy.xml", "1.IIC136Request.xml", "1.IIC136Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC137 ()
			{
				string[] files = new string[] { "1.IIC137Policy.xml", "1.IIC137Request.xml", "1.IIC137Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC138 ()
			{
				string[] files = new string[] { "1.IIC138Policy.xml", "1.IIC138Request.xml", "1.IIC138Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC139 ()
			{
				string[] files = new string[] { "1.IIC139Policy.xml", "1.IIC139Request.xml", "1.IIC139Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC140 ()
			{
				string[] files = new string[] { "1.IIC140Policy.xml", "1.IIC140Request.xml", "1.IIC140Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC141 ()
			{
				string[] files = new string[] { "1.IIC141Policy.xml", "1.IIC141Request.xml", "1.IIC141Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC142 ()
			{
				string[] files = new string[] { "1.IIC142Policy.xml", "1.IIC142Request.xml", "1.IIC142Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC143 ()
			{
				string[] files = new string[] { "1.IIC143Policy.xml", "1.IIC143Request.xml", "1.IIC143Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC144 ()
			{
				string[] files = new string[] { "1.IIC144Policy.xml", "1.IIC144Request.xml", "1.IIC144Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC145 ()
			{
				string[] files = new string[] { "1.IIC145Policy.xml", "1.IIC145Request.xml", "1.IIC145Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC146 ()
			{
				string[] files = new string[] { "1.IIC146Policy.xml", "1.IIC146Request.xml", "1.IIC146Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC147 ()
			{
				string[] files = new string[] { "1.IIC147Policy.xml", "1.IIC147Request.xml", "1.IIC147Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC148 ()
			{
				string[] files = new string[] { "1.IIC148Policy.xml", "1.IIC148Request.xml", "1.IIC148Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC149 ()
			{
				string[] files = new string[] { "1.IIC149Policy.xml", "1.IIC149Request.xml", "1.IIC149Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC150 ()
			{
				string[] files = new string[] { "1.IIC150Policy.xml", "1.IIC150Request.xml", "1.IIC150Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC151 ()
			{
				string[] files = new string[] { "1.IIC151Policy.xml", "1.IIC151Request.xml", "1.IIC151Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC152 ()
			{
				string[] files = new string[] { "1.IIC152Policy.xml", "1.IIC152Request.xml", "1.IIC152Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC153 ()
			{
				string[] files = new string[] { "1.IIC153Policy.xml", "1.IIC153Request.xml", "1.IIC153Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC154 ()
			{
				string[] files = new string[] { "1.IIC154Policy.xml", "1.IIC154Request.xml", "1.IIC154Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC155 ()
			{
				string[] files = new string[] { "1.IIC155Policy.xml", "1.IIC155Request.xml", "1.IIC155Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC156 ()
			{
				string[] files = new string[] { "1.IIC156Policy.xml", "1.IIC156Request.xml", "1.IIC156Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC157 ()
			{
				string[] files = new string[] { "1.IIC157Policy.xml", "1.IIC157Request.xml", "1.IIC157Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC158 ()
			{
				string[] files = new string[] { "1.IIC158Policy.xml", "1.IIC158Request.xml", "1.IIC158Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC159 ()
			{
				string[] files = new string[] { "1.IIC159Policy.xml", "1.IIC159Request.xml", "1.IIC159Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC160 ()
			{
				string[] files = new string[] { "1.IIC160Policy.xml", "1.IIC160Request.xml", "1.IIC160Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC161 ()
			{
				string[] files = new string[] { "1.IIC161Policy.xml", "1.IIC161Request.xml", "1.IIC161Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC162 ()
			{
				string[] files = new string[] { "1.IIC162Policy.xml", "1.IIC162Request.xml", "1.IIC162Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC163 ()
			{
				string[] files = new string[] { "1.IIC163Policy.xml", "1.IIC163Request.xml", "1.IIC163Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC164 ()
			{
				string[] files = new string[] { "1.IIC164Policy.xml", "1.IIC164Request.xml", "1.IIC164Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC165 ()
			{
				string[] files = new string[] { "1.IIC165Policy.xml", "1.IIC165Request.xml", "1.IIC165Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC166 ()
			{
				string[] files = new string[] { "1.IIC166Policy.xml", "1.IIC166Request.xml", "1.IIC166Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC167 ()
			{
				string[] files = new string[] { "1.IIC167Policy.xml", "1.IIC167Request.xml", "1.IIC167Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC168 ()
			{
				string[] files = new string[] { "1.IIC168Policy.xml", "1.IIC168Request.xml", "1.IIC168Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}

			[Test]
			public void IIC168a ()
			{
				string[] files = new string[] { "1.IIC168aPolicy.xml", "1.IIC168aRequest.xml", "1.IIC168aResponse.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}


			[Test]
			public void IIC169 ()
			{
				string[] files = new string[] { "1.IIC169Policy.xml", "1.IIC169Request.xml", "1.IIC169Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC170 ()
			{
				string[] files = new string[] { "1.IIC170Policy.xml", "1.IIC170Request.xml", "1.IIC170Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC171 ()
			{
				string[] files = new string[] { "1.IIC171Policy.xml", "1.IIC171Request.xml", "1.IIC171Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC172 ()
			{
				string[] files = new string[] { "1.IIC172Policy.xml", "1.IIC172Request.xml", "1.IIC172Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC173 ()
			{
				string[] files = new string[] { "1.IIC173Policy.xml", "1.IIC173Request.xml", "1.IIC173Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC174 ()
			{
				string[] files = new string[] { "1.IIC174Policy.xml", "1.IIC174Request.xml", "1.IIC174Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC175 ()
			{
				string[] files = new string[] { "1.IIC175Policy.xml", "1.IIC175Request.xml", "1.IIC175Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC176 ()
			{
				string[] files = new string[] { "1.IIC176Policy.xml", "1.IIC176Request.xml", "1.IIC176Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC177 ()
			{
				string[] files = new string[] { "1.IIC177Policy.xml", "1.IIC177Request.xml", "1.IIC177Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC178 ()
			{
				string[] files = new string[] { "1.IIC178Policy.xml", "1.IIC178Request.xml", "1.IIC178Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC179 ()
			{
				string[] files = new string[] { "1.IIC179Policy.xml", "1.IIC179Request.xml", "1.IIC179Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC180 ()
			{
				string[] files = new string[] { "1.IIC180Policy.xml", "1.IIC180Request.xml", "1.IIC180Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC181 ()
			{
				string[] files = new string[] { "1.IIC181Policy.xml", "1.IIC181Request.xml", "1.IIC181Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC182 ()
			{
				string[] files = new string[] { "1.IIC182Policy.xml", "1.IIC182Request.xml", "1.IIC182Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC183 ()
			{
				string[] files = new string[] { "1.IIC183Policy.xml", "1.IIC183Request.xml", "1.IIC183Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC184 ()
			{
				string[] files = new string[] { "1.IIC184Policy.xml", "1.IIC184Request.xml", "1.IIC184Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC185 ()
			{
				string[] files = new string[] { "1.IIC185Policy.xml", "1.IIC185Request.xml", "1.IIC185Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC186 ()
			{
				string[] files = new string[] { "1.IIC186Policy.xml", "1.IIC186Request.xml", "1.IIC186Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC187 ()
			{
				string[] files = new string[] { "1.IIC187Policy.xml", "1.IIC187Request.xml", "1.IIC187Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC188 ()
			{
				string[] files = new string[] { "1.IIC188Policy.xml", "1.IIC188Request.xml", "1.IIC188Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC189 ()
			{
				string[] files = new string[] { "1.IIC189Policy.xml", "1.IIC189Request.xml", "1.IIC189Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC190 ()
			{
				string[] files = new string[] { "1.IIC190Policy.xml", "1.IIC190Request.xml", "1.IIC190Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC191 ()
			{
				string[] files = new string[] { "1.IIC191Policy.xml", "1.IIC191Request.xml", "1.IIC191Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC192 ()
			{
				string[] files = new string[] { "1.IIC192Policy.xml", "1.IIC192Request.xml", "1.IIC192Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC193 ()
			{
				string[] files = new string[] { "1.IIC193Policy.xml", "1.IIC193Request.xml", "1.IIC193Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC194 ()
			{
				string[] files = new string[] { "1.IIC194Policy.xml", "1.IIC194Request.xml", "1.IIC194Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC195 ()
			{
				string[] files = new string[] { "1.IIC195Policy.xml", "1.IIC195Request.xml", "1.IIC195Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC196 ()
			{
				string[] files = new string[] { "1.IIC196Policy.xml", "1.IIC196Request.xml", "1.IIC196Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC197 ()
			{
				string[] files = new string[] { "1.IIC197Policy.xml", "1.IIC197Request.xml", "1.IIC197Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC198 ()
			{
				string[] files = new string[] { "1.IIC198Policy.xml", "1.IIC198Request.xml", "1.IIC198Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC199 ()
			{
				string[] files = new string[] { "1.IIC199Policy.xml", "1.IIC199Request.xml", "1.IIC199Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC200 ()
			{
				string[] files = new string[] { "1.IIC200Policy.xml", "1.IIC200Request.xml", "1.IIC200Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC201 ()
			{
				string[] files = new string[] { "1.IIC201Policy.xml", "1.IIC201Request.xml", "1.IIC201Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC202 ()
			{
				string[] files = new string[] { "1.IIC202Policy.xml", "1.IIC202Request.xml", "1.IIC202Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC203 ()
			{
				string[] files = new string[] { "1.IIC203Policy.xml", "1.IIC203Request.xml", "1.IIC203Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC204 ()
			{
				string[] files = new string[] { "1.IIC204Policy.xml", "1.IIC204Request.xml", "1.IIC204Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC205 ()
			{
				string[] files = new string[] { "1.IIC205Policy.xml", "1.IIC205Request.xml", "1.IIC205Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC206 ()
			{
				string[] files = new string[] { "1.IIC206Policy.xml", "1.IIC206Request.xml", "1.IIC206Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC207 ()
			{
				string[] files = new string[] { "1.IIC207Policy.xml", "1.IIC207Request.xml", "1.IIC207Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC208 ()
			{
				string[] files = new string[] { "1.IIC208Policy.xml", "1.IIC208Request.xml", "1.IIC208Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC209 ()
			{
				string[] files = new string[] { "1.IIC209Policy.xml", "1.IIC209Request.xml", "1.IIC209Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC210 ()
			{
				string[] files = new string[] { "1.IIC210Policy.xml", "1.IIC210Request.xml", "1.IIC210Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC211 ()
			{
				string[] files = new string[] { "1.IIC211Policy.xml", "1.IIC211Request.xml", "1.IIC211Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC212 ()
			{
				string[] files = new string[] { "1.IIC212Policy.xml", "1.IIC212Request.xml", "1.IIC212Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC213 ()
			{
				string[] files = new string[] { "1.IIC213Policy.xml", "1.IIC213Request.xml", "1.IIC213Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC214 ()
			{
				string[] files = new string[] { "1.IIC214Policy.xml", "1.IIC214Request.xml", "1.IIC214Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC215 ()
			{
				string[] files = new string[] { "1.IIC215Policy.xml", "1.IIC215Request.xml", "1.IIC215Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC216 ()
			{
				string[] files = new string[] { "1.IIC216Policy.xml", "1.IIC216Request.xml", "1.IIC216Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC217 ()
			{
				string[] files = new string[] { "1.IIC217Policy.xml", "1.IIC217Request.xml", "1.IIC217Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC218 ()
			{
				string[] files = new string[] { "1.IIC218Policy.xml", "1.IIC218Request.xml", "1.IIC218Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC219 ()
			{
				string[] files = new string[] { "1.IIC219Policy.xml", "1.IIC219Request.xml", "1.IIC219Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC220 ()
			{
				string[] files = new string[] { "1.IIC220Policy.xml", "1.IIC220Request.xml", "1.IIC220Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC221 ()
			{
				string[] files = new string[] { "1.IIC221Policy.xml", "1.IIC221Request.xml", "1.IIC221Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC222 ()
			{
				string[] files = new string[] { "1.IIC222Policy.xml", "1.IIC222Request.xml", "1.IIC222Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC223 ()
			{
				string[] files = new string[] { "1.IIC223Policy.xml", "1.IIC223Request.xml", "1.IIC223Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC224 ()
			{
				string[] files = new string[] { "1.IIC224Policy.xml", "1.IIC224Request.xml", "1.IIC224Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC225 ()
			{
				string[] files = new string[] { "1.IIC225Policy.xml", "1.IIC225Request.xml", "1.IIC225Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC226 ()
			{
				string[] files = new string[] { "1.IIC226Policy.xml", "1.IIC226Request.xml", "1.IIC226Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC227 ()
			{
				string[] files = new string[] { "1.IIC227Policy.xml", "1.IIC227Request.xml", "1.IIC227Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC228 ()
			{
				string[] files = new string[] { "1.IIC228Policy.xml", "1.IIC228Request.xml", "1.IIC228Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC229 ()
			{
				string[] files = new string[] { "1.IIC229Policy.xml", "1.IIC229Request.xml", "1.IIC229Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC230 ()
			{
				string[] files = new string[] { "1.IIC230Policy.xml", "1.IIC230Request.xml", "1.IIC230Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC231 ()
			{
				string[] files = new string[] { "1.IIC231Policy.xml", "1.IIC231Request.xml", "1.IIC231Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIC232 ()
			{
				string[] files = new string[] { "1.IIC232Policy.xml", "1.IIC232Request.xml", "1.IIC232Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
		}


		[TestFixture]
		public class CombiningAlgorithms
		{
			public CombiningAlgorithms()
			{
			}
			
			[Test]
			public void IID001 ()
			{
				string[] files = new string[] { "1.IID001Policy.xml", "1.IID001Request.xml", "1.IID001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID002 ()
			{
				string[] files = new string[] { "1.IID002Policy.xml", "1.IID002Request.xml", "1.IID002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID003 ()
			{
				string[] files = new string[] { "1.IID003Policy.xml", "1.IID003Request.xml", "1.IID003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID004 ()
			{
				string[] files = new string[] { "1.IID004Policy.xml", "1.IID004Request.xml", "1.IID004Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID005 ()
			{
				string[] files = new string[] { "1.IID005Policy.xml", "1.IID005Request.xml", "1.IID005Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID006 ()
			{
				string[] files = new string[] { "1.IID006Policy.xml", "1.IID006Request.xml", "1.IID006Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID007 ()
			{
				string[] files = new string[] { "1.IID007Policy.xml", "1.IID007Request.xml", "1.IID007Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID008 ()
			{
				string[] files = new string[] { "1.IID008Policy.xml", "1.IID008Request.xml", "1.IID008Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID009 ()
			{
				string[] files = new string[] { "1.IID009Policy.xml", "1.IID009Request.xml", "1.IID009Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID010 ()
			{
				string[] files = new string[] { "1.IID010Policy.xml", "1.IID010Request.xml", "1.IID010Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID011 ()
			{
				string[] files = new string[] { "1.IID011Policy.xml", "1.IID011Request.xml", "1.IID011Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID012 ()
			{
				string[] files = new string[] { "1.IID012Policy.xml", "1.IID012Request.xml", "1.IID012Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID013 ()
			{
				string[] files = new string[] { "1.IID013Policy.xml", "1.IID013Request.xml", "1.IID013Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID014 ()
			{
				string[] files = new string[] { "1.IID014Policy.xml", "1.IID014Request.xml", "1.IID014Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID015 ()
			{
				string[] files = new string[] { "1.IID015Policy.xml", "1.IID015Request.xml", "1.IID015Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID016 ()
			{
				string[] files = new string[] { "1.IID016Policy.xml", "1.IID016Request.xml", "1.IID016Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID017 ()
			{
				string[] files = new string[] { "1.IID017Policy.xml", "1.IID017Request.xml", "1.IID017Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID018 ()
			{
				string[] files = new string[] { "1.IID018Policy.xml", "1.IID018Request.xml", "1.IID018Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID019 ()
			{
				string[] files = new string[] { "1.IID019Policy.xml", "1.IID019Request.xml", "1.IID019Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID020 ()
			{
				string[] files = new string[] { "1.IID020Policy.xml", "1.IID020Request.xml", "1.IID020Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID021 ()
			{
				string[] files = new string[] { "1.IID021Policy.xml", "1.IID021Request.xml", "1.IID021Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID022 ()
			{
				string[] files = new string[] { "1.IID022Policy.xml", "1.IID022Request.xml", "1.IID022Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID023 ()
			{
				string[] files = new string[] { "1.IID023Policy.xml", "1.IID023Request.xml", "1.IID023Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID024 ()
			{
				string[] files = new string[] { "1.IID024Policy.xml", "1.IID024Request.xml", "1.IID024Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID025 ()
			{
				string[] files = new string[] { "1.IID025Policy.xml", "1.IID025Request.xml", "1.IID025Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID026 ()
			{
				string[] files = new string[] { "1.IID026Policy.xml", "1.IID026Request.xml", "1.IID026Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID027 ()
			{
				string[] files = new string[] { "1.IID027Policy.xml", "1.IID027Request.xml", "1.IID027Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IID028 ()
			{
				string[] files = new string[] { "1.IID028Policy.xml", "1.IID028Request.xml", "1.IID028Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 
			//IID029Special.txt
			[Test]
			[Ignore("Configuration must be changed in order to run this test")]
			public void IID029 ()
			{
				string[] files = new string[] { "1.IID029Request.xml", "1.IID029Response.xml" };
				FileInfo requestFile = new FileInfo( files[0] );
				FileInfo ResponseElementFile = new FileInfo( files[1] );
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 
			//IID030Special.txt
			[Test]
			[Ignore("Configuration must be changed in order to run this test")]
			public void IID030 ()
			{
				string[] files = new string[] { "1.IID030Request.xml", "1.IID030Response.xml" };
				FileInfo requestFile = new FileInfo( files[0] );
				FileInfo ResponseElementFile = new FileInfo( files[1] );
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
		}


		[TestFixture]
		public class SchemaComponents 
		{
			public SchemaComponents()
			{
			}

			//IIE001Special.txt
			[Test]
			public void IIE001 ()
			{
				string[] files = new string[] { "1.IIE001Policy.xml", "1.IIE001Request.xml", "1.IIE001Response.xml", "1.IIE001PolicyId1.xml", "1.IIE001PolicySetId1.xml" };
				FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}

			//IIE002Special.txt
			[Test]
			public void IIE002 ()
			{
				string[] files = new string[] { "1.IIE002Policy.xml", "1.IIE002Request.xml", "1.IIE002Response.xml", "1.IIE002PolicyId1.xml", "1.IIE002PolicySetId1.xml" };
				FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			//IIE003Special.txt
			[Test]
			public void IIE003 ()
			{
				string[] files = new string[] { "1.IIE003Policy.xml", "1.IIE003Request.xml", "1.IIE003Response.xml", "1.IIE003PolicyId1.xml", "1.IIE003PolicyId2.xml" };
				FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
		}
	}

	namespace OptionalButNormativeFunctionalityTests 
	{
		[TestFixture]
		public class Obligations 
		{
			public Obligations ()
			{
			}

			//IIIASpecial.txt
			[Test]
			public void IIIA001 ()
			{
				string[] files = new string[] { "1.IIIA001Policy.xml", "1.IIIA001Request.xml", "1.IIIA001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
					
				}
			}
 

			[Test]
			public void IIIA002 ()
			{
				string[] files = new string[] { "1.IIIA002Policy.xml", "1.IIIA002Request.xml", "1.IIIA002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA003 ()
			{
				string[] files = new string[] { "1.IIIA003Policy.xml", "1.IIIA003Request.xml", "1.IIIA003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA004 ()
			{
				string[] files = new string[] { "1.IIIA004Policy.xml", "1.IIIA004Request.xml", "1.IIIA004Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA005 ()
			{
				string[] files = new string[] { "1.IIIA005Policy.xml", "1.IIIA005Request.xml", "1.IIIA005Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA006 ()
			{
				string[] files = new string[] { "1.IIIA006Policy.xml", "1.IIIA006Request.xml", "1.IIIA006Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA007 ()
			{
				string[] files = new string[] { "1.IIIA007Policy.xml", "1.IIIA007Request.xml", "1.IIIA007Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA008 ()
			{
				string[] files = new string[] { "1.IIIA008Policy.xml", "1.IIIA008Request.xml", "1.IIIA008Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA009 ()
			{
				string[] files = new string[] { "1.IIIA009Policy.xml", "1.IIIA009Request.xml", "1.IIIA009Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA010 ()
			{
				string[] files = new string[] { "1.IIIA010Policy.xml", "1.IIIA010Request.xml", "1.IIIA010Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA011 ()
			{
				string[] files = new string[] { "1.IIIA011Policy.xml", "1.IIIA011Request.xml", "1.IIIA011Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA012 ()
			{
				string[] files = new string[] { "1.IIIA012Policy.xml", "1.IIIA012Request.xml", "1.IIIA012Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA013 ()
			{
				string[] files = new string[] { "1.IIIA013Policy.xml", "1.IIIA013Request.xml", "1.IIIA013Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA014 ()
			{
				string[] files = new string[] { "1.IIIA014Policy.xml", "1.IIIA014Request.xml", "1.IIIA014Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA015 ()
			{
				string[] files = new string[] { "1.IIIA015Policy.xml", "1.IIIA015Request.xml", "1.IIIA015Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA016 ()
			{
				string[] files = new string[] { "1.IIIA016Policy.xml", "1.IIIA016Request.xml", "1.IIIA016Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA017 ()
			{
				string[] files = new string[] { "1.IIIA017Policy.xml", "1.IIIA017Request.xml", "1.IIIA017Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA018 ()
			{
				string[] files = new string[] { "1.IIIA018Policy.xml", "1.IIIA018Request.xml", "1.IIIA018Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA019 ()
			{
				string[] files = new string[] { "1.IIIA019Policy.xml", "1.IIIA019Request.xml", "1.IIIA019Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA020 ()
			{
				string[] files = new string[] { "1.IIIA020Policy.xml", "1.IIIA020Request.xml", "1.IIIA020Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA021 ()
			{
				string[] files = new string[] { "1.IIIA021Policy.xml", "1.IIIA021Request.xml", "1.IIIA021Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA022 ()
			{
				string[] files = new string[] { "1.IIIA022Policy.xml", "1.IIIA022Request.xml", "1.IIIA022Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA023 ()
			{
				string[] files = new string[] { "1.IIIA023Policy.xml", "1.IIIA023Request.xml", "1.IIIA023Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA024 ()
			{
				string[] files = new string[] { "1.IIIA024Policy.xml", "1.IIIA024Request.xml", "1.IIIA024Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA025 ()
			{
				string[] files = new string[] { "1.IIIA025Policy.xml", "1.IIIA025Request.xml", "1.IIIA025Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA026 ()
			{
				string[] files = new string[] { "1.IIIA026Policy.xml", "1.IIIA026Request.xml", "1.IIIA026Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA027 ()
			{
				string[] files = new string[] { "1.IIIA027Policy.xml", "1.IIIA027Request.xml", "1.IIIA027Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIA028 ()
			{
				string[] files = new string[] { "1.IIIA028Policy.xml", "1.IIIA028Request.xml", "1.IIIA028Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
		}


		[TestFixture]
		public class HierarchicalResources
		{
			public HierarchicalResources()
			{
			}

			//IIICSpecial.txt
			[Test]
			public void IIIC001 ()
			{
				string[] files = new string[] { "1.IIIC001Policy.xml", "1.IIIC001Request.xml", "1.IIIC001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					for( int i = 0; i < ResponseElementDocument.Response.Results.Count ; i++ )
					{
						NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[ i ]).Decision, ((ResultElement)ResponseElementDocument.Response.Results[ i ]).Decision );
					}
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}

			[Test]
			public void IIIC002 ()
			{
				string[] files = new string[] { "1.IIIC002Policy.xml", "1.IIIC002Request.xml", "1.IIIC002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					for( int i = 0; i < ResponseElementDocument.Response.Results.Count ; i++ )
					{
						NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[ i ]).Decision, ((ResultElement)ResponseElementDocument.Response.Results[ i ]).Decision );
					}
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );
				}
			}

			[Test]
			public void IIIC003 ()
			{
				string[] files = new string[] { "1.IIIC003Policy.xml", "1.IIIC003Request.xml", "1.IIIC003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					for( int i = 0; i < ResponseElementDocument.Response.Results.Count ; i++ )
					{
						NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[ i ]).Decision, ((ResultElement)ResponseElementDocument.Response.Results[ i ]).Decision );
					}
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
		}


		[TestFixture]
		public class AttributeSelectors
		{
			public AttributeSelectors()
			{
			}

			//IIIFSpecial.txt
			[Test]
			public void IIIF001 ()
			{
				string[] files = new string[] { "1.IIIF001Policy.xml", "1.IIIF001Request.xml", "1.IIIF001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIF002 ()
			{
				string[] files = new string[] { "1.IIIF002Policy.xml", "1.IIIF002Request.xml", "1.IIIF002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIF003 ()
			{
				string[] files = new string[] { "1.IIIF003Policy.xml", "1.IIIF003Request.xml", "1.IIIF003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIF004 ()
			{
				string[] files = new string[] { "1.IIIF004Policy.xml", "1.IIIF004Request.xml", "1.IIIF004Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
            [Ignore(".NET does not support XPath 2.0, this test will fail")]
			public void IIIF005 ()
			{
				string[] files = new string[] { "1.IIIF005Policy.xml", "1.IIIF005Request.xml", "1.IIIF005Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIF006 ()
			{
				string[] files = new string[] { "1.IIIF006Policy.xml", "1.IIIF006Request.xml", "1.IIIF006Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 
			[Test]
			public void IIIF007 ()
			{
				string[] files = new string[] { "1.IIIF007Policy.xml", "1.IIIF007Request.xml", "1.IIIF007Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 
		}


		[TestFixture]
		public class NonMandatoryFunctions 
		{
			public NonMandatoryFunctions()
			{
			}

			[Test]
			public void IIIG001 ()
			{
				string[] files = new string[] { "1.IIIG001Policy.xml", "1.IIIG001Request.xml", "1.IIIG001Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIG002 ()
			{
				string[] files = new string[] { "1.IIIG002Policy.xml", "1.IIIG002Request.xml", "1.IIIG002Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIG003 ()
			{
				string[] files = new string[] { "1.IIIG003Policy.xml", "1.IIIG003Request.xml", "1.IIIG003Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIG004 ()
			{
				string[] files = new string[] { "1.IIIG004Policy.xml", "1.IIIG004Request.xml", "1.IIIG004Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			[Test]
			public void IIIG005 ()
			{
				string[] files = new string[] { "1.IIIG005Policy.xml", "1.IIIG005Request.xml", "1.IIIG005Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}
 

			//IIIG006Special.txt
			[Test]
			public void IIIG006 ()
			{
				string[] files = new string[] { "1.IIIG006Policy.xml", "1.IIIG006Request.xml", "1.IIIG006Response.xml" };
				Assert.AreEqual( files.Length, 3, "Test incomplete" );FileInfo policyFile = new FileInfo( files[0] );
				FileInfo requestFile = new FileInfo( files[1] );
				FileInfo ResponseElementFile = new FileInfo( files[2] );
				using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs1 = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
				using( FileStream fs2 = new FileStream( ResponseElementFile.FullName, FileMode.Open, FileAccess.Read ) )
				{
					// Load Policy
					PolicyDocument policyDocument = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadOnly );
					// Load Request
					ContextDocumentReadWrite requestDocument = ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
					// Load ResponseElement
					ContextDocumentReadWrite ResponseElementDocument = ContextLoader.LoadContextDocument( fs2, XacmlVersion.Version11 );
					EvaluationEngine engine = new EvaluationEngine();
					
					ResponseElement res = engine.Evaluate( policyDocument, (ContextDocument)requestDocument );
					NUnit.Framework.Assert.AreEqual( ((ResultElement)res.Results[0]).Obligations.Count, ((ResultElement)ResponseElementDocument.Response.Results[0]).Obligations.Count );
					NUnit.Framework.Assert.AreEqual( ResponseElementDocument.Response.Results.Count, res.Results.Count );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Decision.ToString() == ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), string.Format( "Decission incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Decision.ToString(), ((ResultElement)res.Results[0]).Decision.ToString() ) );
					NUnit.Framework.Assert.IsTrue( ((ResultElement)res.Results[0]).Status.StatusCode.Value == ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, String.Format( "Status incorrect Expected:{0} Returned:{1}", ((ResultElement)ResponseElementDocument.Response.Results[0]).Status.StatusCode.Value, ((ResultElement)res.Results[0]).Status.StatusCode.Value ) );

				}
			}

		}

		namespace ReadWriteTests
		{
			[TestFixture]
			public class PolicyTests
			{
				public PolicyTests()
				{
				}
				[Test]
				public void IIA001 ()
				{
					string[] files = new string[] { "1.IIA001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA002 ()
				{
					string[] files = new string[] { "1.IIA002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA003 ()
				{
					string[] files = new string[] { "1.IIA003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA004 ()
				{
					string[] files = new string[] { "1.IIA004Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA005 ()
				{
					string[] files = new string[] { "1.IIA005Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA006 ()
				{
					string[] files = new string[] { "1.IIA006Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA007 ()
				{
					string[] files = new string[] { "1.IIA007Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA008 ()
				{
					string[] files = new string[] { "1.IIA008Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA009 ()
				{
					string[] files = new string[] { "1.IIA009Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA010 ()
				{
					string[] files = new string[] { "1.IIA010Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA011 ()
				{
					string[] files = new string[] { "1.IIA011Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA012 ()
				{
					string[] files = new string[] { "1.IIA012Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA013 ()
				{
					string[] files = new string[] { "1.IIA013Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA014 ()
				{
					string[] files = new string[] { "1.IIA014Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA015 ()
				{
					string[] files = new string[] { "1.IIA015Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA016 ()
				{
					string[] files = new string[] { "1.IIA016Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA017 ()
				{
					string[] files = new string[] { "1.IIA017Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA018 ()
				{
					string[] files = new string[] { "1.IIA018Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA019 ()
				{
					string[] files = new string[] { "1.IIA019Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA020 ()
				{
					string[] files = new string[] { "1.IIA020Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIA021 ()
				{
					string[] files = new string[] { "1.IIA021Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB001 ()
				{
					string[] files = new string[] { "1.IIB001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB002 ()
				{
					string[] files = new string[] { "1.IIB002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB003 ()
				{
					string[] files = new string[] { "1.IIB003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB004 ()
				{
					string[] files = new string[] { "1.IIB004Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB005 ()
				{
					string[] files = new string[] { "1.IIB005Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB006 ()
				{
					string[] files = new string[] { "1.IIB006Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB007 ()
				{
					string[] files = new string[] { "1.IIB007Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB008 ()
				{
					string[] files = new string[] { "1.IIB008Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB009 ()
				{
					string[] files = new string[] { "1.IIB009Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB010 ()
				{
					string[] files = new string[] { "1.IIB010Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB011 ()
				{
					string[] files = new string[] { "1.IIB011Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB012 ()
				{
					string[] files = new string[] { "1.IIB012Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB013 ()
				{
					string[] files = new string[] { "1.IIB013Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB014 ()
				{
					string[] files = new string[] { "1.IIB014Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB015 ()
				{
					string[] files = new string[] { "1.IIB015Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB016 ()
				{
					string[] files = new string[] { "1.IIB016Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB017 ()
				{
					string[] files = new string[] { "1.IIB017Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB018 ()
				{
					string[] files = new string[] { "1.IIB018Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB019 ()
				{
					string[] files = new string[] { "1.IIB019Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB020 ()
				{
					string[] files = new string[] { "1.IIB020Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB021 ()
				{
					string[] files = new string[] { "1.IIB021Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB022 ()
				{
					string[] files = new string[] { "1.IIB022Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB023 ()
				{
					string[] files = new string[] { "1.IIB023Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB024 ()
				{
					string[] files = new string[] { "1.IIB024Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB025 ()
				{
					string[] files = new string[] { "1.IIB025Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB026 ()
				{
					string[] files = new string[] { "1.IIB026Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB027 ()
				{
					string[] files = new string[] { "1.IIB027Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB028 ()
				{
					string[] files = new string[] { "1.IIB028Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB029 ()
				{
					string[] files = new string[] { "1.IIB029Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB030 ()
				{
					string[] files = new string[] { "1.IIB030Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB031 ()
				{
					string[] files = new string[] { "1.IIB031Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB032 ()
				{
					string[] files = new string[] { "1.IIB032Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB033 ()
				{
					string[] files = new string[] { "1.IIB033Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB034 ()
				{
					string[] files = new string[] { "1.IIB034Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB035 ()
				{
					string[] files = new string[] { "1.IIB035Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB036 ()
				{
					string[] files = new string[] { "1.IIB036Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB037 ()
				{
					string[] files = new string[] { "1.IIB037Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB038 ()
				{
					string[] files = new string[] { "1.IIB038Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB039 ()
				{
					string[] files = new string[] { "1.IIB039Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB040 ()
				{
					string[] files = new string[] { "1.IIB040Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB041 ()
				{
					string[] files = new string[] { "1.IIB041Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB042 ()
				{
					string[] files = new string[] { "1.IIB042Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB043 ()
				{
					string[] files = new string[] { "1.IIB043Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB044 ()
				{
					string[] files = new string[] { "1.IIB044Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB045 ()
				{
					string[] files = new string[] { "1.IIB045Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB046 ()
				{
					string[] files = new string[] { "1.IIB046Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB047 ()
				{
					string[] files = new string[] { "1.IIB047Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB048 ()
				{
					string[] files = new string[] { "1.IIB048Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB049 ()
				{
					string[] files = new string[] { "1.IIB049Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB050 ()
				{
					string[] files = new string[] { "1.IIB050Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB051 ()
				{
					string[] files = new string[] { "1.IIB051Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB052 ()
				{
					string[] files = new string[] { "1.IIB052Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIB053 ()
				{
					string[] files = new string[] { "1.IIB053Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC001 ()
				{
					string[] files = new string[] { "1.IIC001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC002 ()
				{
					string[] files = new string[] { "1.IIC002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC003 ()
				{
					string[] files = new string[] { "1.IIC003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC004 ()
				{
					string[] files = new string[] { "1.IIC004Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC005 ()
				{
					string[] files = new string[] { "1.IIC005Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC006 ()
				{
					string[] files = new string[] { "1.IIC006Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC007 ()
				{
					string[] files = new string[] { "1.IIC007Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC008 ()
				{
					string[] files = new string[] { "1.IIC008Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC009 ()
				{
					string[] files = new string[] { "1.IIC009Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC010 ()
				{
					string[] files = new string[] { "1.IIC010Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC011 ()
				{
					string[] files = new string[] { "1.IIC011Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC012 ()
				{
					string[] files = new string[] { "1.IIC012Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC013 ()
				{
					string[] files = new string[] { "1.IIC013Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC014 ()
				{
					string[] files = new string[] { "1.IIC014Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC015 ()
				{
					string[] files = new string[] { "1.IIC015Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC016 ()
				{
					string[] files = new string[] { "1.IIC016Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC017 ()
				{
					string[] files = new string[] { "1.IIC017Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC018 ()
				{
					string[] files = new string[] { "1.IIC018Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC019 ()
				{
					string[] files = new string[] { "1.IIC019Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC020 ()
				{
					string[] files = new string[] { "1.IIC020Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC021 ()
				{
					string[] files = new string[] { "1.IIC021Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC022 ()
				{
					string[] files = new string[] { "1.IIC022Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC024 ()
				{
					string[] files = new string[] { "1.IIC024Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC025 ()
				{
					string[] files = new string[] { "1.IIC025Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC026 ()
				{
					string[] files = new string[] { "1.IIC026Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC027 ()
				{
					string[] files = new string[] { "1.IIC027Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC028 ()
				{
					string[] files = new string[] { "1.IIC028Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC029 ()
				{
					string[] files = new string[] { "1.IIC029Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC030 ()
				{
					string[] files = new string[] { "1.IIC030Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC031 ()
				{
					string[] files = new string[] { "1.IIC031Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC032 ()
				{
					string[] files = new string[] { "1.IIC032Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC033 ()
				{
					string[] files = new string[] { "1.IIC033Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC034 ()
				{
					string[] files = new string[] { "1.IIC034Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC035 ()
				{
					string[] files = new string[] { "1.IIC035Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC036 ()
				{
					string[] files = new string[] { "1.IIC036Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC037 ()
				{
					string[] files = new string[] { "1.IIC037Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC038 ()
				{
					string[] files = new string[] { "1.IIC038Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC039 ()
				{
					string[] files = new string[] { "1.IIC039Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC040 ()
				{
					string[] files = new string[] { "1.IIC040Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC041 ()
				{
					string[] files = new string[] { "1.IIC041Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC042 ()
				{
					string[] files = new string[] { "1.IIC042Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC043 ()
				{
					string[] files = new string[] { "1.IIC043Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC044 ()
				{
					string[] files = new string[] { "1.IIC044Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC045 ()
				{
					string[] files = new string[] { "1.IIC045Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC046 ()
				{
					string[] files = new string[] { "1.IIC046Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC047 ()
				{
					string[] files = new string[] { "1.IIC047Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC048 ()
				{
					string[] files = new string[] { "1.IIC048Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC049 ()
				{
					string[] files = new string[] { "1.IIC049Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC050 ()
				{
					string[] files = new string[] { "1.IIC050Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC051 ()
				{
					string[] files = new string[] { "1.IIC051Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC052 ()
				{
					string[] files = new string[] { "1.IIC052Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC053 ()
				{
					string[] files = new string[] { "1.IIC053Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC056 ()
				{
					string[] files = new string[] { "1.IIC056Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC057 ()
				{
					string[] files = new string[] { "1.IIC057Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC058 ()
				{
					string[] files = new string[] { "1.IIC058Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC059 ()
				{
					string[] files = new string[] { "1.IIC059Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC060 ()
				{
					string[] files = new string[] { "1.IIC060Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC061 ()
				{
					string[] files = new string[] { "1.IIC061Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC062 ()
				{
					string[] files = new string[] { "1.IIC062Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC063 ()
				{
					string[] files = new string[] { "1.IIC063Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC064 ()
				{
					string[] files = new string[] { "1.IIC064Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC065 ()
				{
					string[] files = new string[] { "1.IIC065Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC066 ()
				{
					string[] files = new string[] { "1.IIC066Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC067 ()
				{
					string[] files = new string[] { "1.IIC067Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC068 ()
				{
					string[] files = new string[] { "1.IIC068Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC069 ()
				{
					string[] files = new string[] { "1.IIC069Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC070 ()
				{
					string[] files = new string[] { "1.IIC070Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC071 ()
				{
					string[] files = new string[] { "1.IIC071Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC072 ()
				{
					string[] files = new string[] { "1.IIC072Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC073 ()
				{
					string[] files = new string[] { "1.IIC073Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC074 ()
				{
					string[] files = new string[] { "1.IIC074Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC075 ()
				{
					string[] files = new string[] { "1.IIC075Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC076 ()
				{
					string[] files = new string[] { "1.IIC076Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC077 ()
				{
					string[] files = new string[] { "1.IIC077Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC078 ()
				{
					string[] files = new string[] { "1.IIC078Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC079 ()
				{
					string[] files = new string[] { "1.IIC079Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC080 ()
				{
					string[] files = new string[] { "1.IIC080Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC081 ()
				{
					string[] files = new string[] { "1.IIC081Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC082 ()
				{
					string[] files = new string[] { "1.IIC082Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC083 ()
				{
					string[] files = new string[] { "1.IIC083Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC084 ()
				{
					string[] files = new string[] { "1.IIC084Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC085 ()
				{
					string[] files = new string[] { "1.IIC085Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC086 ()
				{
					string[] files = new string[] { "1.IIC086Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC087 ()
				{
					string[] files = new string[] { "1.IIC087Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC090 ()
				{
					string[] files = new string[] { "1.IIC090Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC091 ()
				{
					string[] files = new string[] { "1.IIC091Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC094 ()
				{
					string[] files = new string[] { "1.IIC094Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC095 ()
				{
					string[] files = new string[] { "1.IIC095Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC096 ()
				{
					string[] files = new string[] { "1.IIC096Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC097 ()
				{
					string[] files = new string[] { "1.IIC097Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC100 ()
				{
					string[] files = new string[] { "1.IIC100Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC101 ()
				{
					string[] files = new string[] { "1.IIC101Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC102 ()
				{
					string[] files = new string[] { "1.IIC102Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC103 ()
				{
					string[] files = new string[] { "1.IIC103Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC104 ()
				{
					string[] files = new string[] { "1.IIC104Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC105 ()
				{
					string[] files = new string[] { "1.IIC105Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC106 ()
				{
					string[] files = new string[] { "1.IIC106Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC107 ()
				{
					string[] files = new string[] { "1.IIC107Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC108 ()
				{
					string[] files = new string[] { "1.IIC108Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC109 ()
				{
					string[] files = new string[] { "1.IIC109Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC110 ()
				{
					string[] files = new string[] { "1.IIC110Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC111 ()
				{
					string[] files = new string[] { "1.IIC111Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC112 ()
				{
					string[] files = new string[] { "1.IIC112Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC113 ()
				{
					string[] files = new string[] { "1.IIC113Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC114 ()
				{
					string[] files = new string[] { "1.IIC114Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC115 ()
				{
					string[] files = new string[] { "1.IIC115Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC116 ()
				{
					string[] files = new string[] { "1.IIC116Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC117 ()
				{
					string[] files = new string[] { "1.IIC117Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC118 ()
				{
					string[] files = new string[] { "1.IIC118Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC119 ()
				{
					string[] files = new string[] { "1.IIC119Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC120 ()
				{
					string[] files = new string[] { "1.IIC120Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC121 ()
				{
					string[] files = new string[] { "1.IIC121Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC122 ()
				{
					string[] files = new string[] { "1.IIC122Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC123 ()
				{
					string[] files = new string[] { "1.IIC123Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC124 ()
				{
					string[] files = new string[] { "1.IIC124Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC125 ()
				{
					string[] files = new string[] { "1.IIC125Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC126 ()
				{
					string[] files = new string[] { "1.IIC126Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC127 ()
				{
					string[] files = new string[] { "1.IIC127Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC128 ()
				{
					string[] files = new string[] { "1.IIC128Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC129 ()
				{
					string[] files = new string[] { "1.IIC129Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC130 ()
				{
					string[] files = new string[] { "1.IIC130Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC131 ()
				{
					string[] files = new string[] { "1.IIC131Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC132 ()
				{
					string[] files = new string[] { "1.IIC132Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC133 ()
				{
					string[] files = new string[] { "1.IIC133Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC134 ()
				{
					string[] files = new string[] { "1.IIC134Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC135 ()
				{
					string[] files = new string[] { "1.IIC135Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC136 ()
				{
					string[] files = new string[] { "1.IIC136Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC137 ()
				{
					string[] files = new string[] { "1.IIC137Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC138 ()
				{
					string[] files = new string[] { "1.IIC138Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC139 ()
				{
					string[] files = new string[] { "1.IIC139Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC140 ()
				{
					string[] files = new string[] { "1.IIC140Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC141 ()
				{
					string[] files = new string[] { "1.IIC141Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC142 ()
				{
					string[] files = new string[] { "1.IIC142Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC143 ()
				{
					string[] files = new string[] { "1.IIC143Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC144 ()
				{
					string[] files = new string[] { "1.IIC144Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC145 ()
				{
					string[] files = new string[] { "1.IIC145Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC146 ()
				{
					string[] files = new string[] { "1.IIC146Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC147 ()
				{
					string[] files = new string[] { "1.IIC147Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC148 ()
				{
					string[] files = new string[] { "1.IIC148Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC149 ()
				{
					string[] files = new string[] { "1.IIC149Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC150 ()
				{
					string[] files = new string[] { "1.IIC150Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC151 ()
				{
					string[] files = new string[] { "1.IIC151Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC152 ()
				{
					string[] files = new string[] { "1.IIC152Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC153 ()
				{
					string[] files = new string[] { "1.IIC153Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC154 ()
				{
					string[] files = new string[] { "1.IIC154Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC155 ()
				{
					string[] files = new string[] { "1.IIC155Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC156 ()
				{
					string[] files = new string[] { "1.IIC156Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC157 ()
				{
					string[] files = new string[] { "1.IIC157Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC158 ()
				{
					string[] files = new string[] { "1.IIC158Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC159 ()
				{
					string[] files = new string[] { "1.IIC159Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC160 ()
				{
					string[] files = new string[] { "1.IIC160Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC161 ()
				{
					string[] files = new string[] { "1.IIC161Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC162 ()
				{
					string[] files = new string[] { "1.IIC162Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC163 ()
				{
					string[] files = new string[] { "1.IIC163Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC164 ()
				{
					string[] files = new string[] { "1.IIC164Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC165 ()
				{
					string[] files = new string[] { "1.IIC165Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC166 ()
				{
					string[] files = new string[] { "1.IIC166Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC167 ()
				{
					string[] files = new string[] { "1.IIC167Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC168a ()
				{
					string[] files = new string[] { "1.IIC168aPolicy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC168 ()
				{
					string[] files = new string[] { "1.IIC168Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC169 ()
				{
					string[] files = new string[] { "1.IIC169Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC170 ()
				{
					string[] files = new string[] { "1.IIC170Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC171 ()
				{
					string[] files = new string[] { "1.IIC171Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC172 ()
				{
					string[] files = new string[] { "1.IIC172Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC173 ()
				{
					string[] files = new string[] { "1.IIC173Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC174 ()
				{
					string[] files = new string[] { "1.IIC174Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC175 ()
				{
					string[] files = new string[] { "1.IIC175Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC176 ()
				{
					string[] files = new string[] { "1.IIC176Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC177 ()
				{
					string[] files = new string[] { "1.IIC177Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC178 ()
				{
					string[] files = new string[] { "1.IIC178Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC179 ()
				{
					string[] files = new string[] { "1.IIC179Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC180 ()
				{
					string[] files = new string[] { "1.IIC180Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC181 ()
				{
					string[] files = new string[] { "1.IIC181Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC182 ()
				{
					string[] files = new string[] { "1.IIC182Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC183 ()
				{
					string[] files = new string[] { "1.IIC183Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC184 ()
				{
					string[] files = new string[] { "1.IIC184Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC185 ()
				{
					string[] files = new string[] { "1.IIC185Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC186 ()
				{
					string[] files = new string[] { "1.IIC186Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC187 ()
				{
					string[] files = new string[] { "1.IIC187Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC188 ()
				{
					string[] files = new string[] { "1.IIC188Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC189 ()
				{
					string[] files = new string[] { "1.IIC189Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC190 ()
				{
					string[] files = new string[] { "1.IIC190Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC191 ()
				{
					string[] files = new string[] { "1.IIC191Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC192 ()
				{
					string[] files = new string[] { "1.IIC192Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC193 ()
				{
					string[] files = new string[] { "1.IIC193Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC194 ()
				{
					string[] files = new string[] { "1.IIC194Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC195 ()
				{
					string[] files = new string[] { "1.IIC195Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC196 ()
				{
					string[] files = new string[] { "1.IIC196Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC197 ()
				{
					string[] files = new string[] { "1.IIC197Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC198 ()
				{
					string[] files = new string[] { "1.IIC198Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC199 ()
				{
					string[] files = new string[] { "1.IIC199Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC200 ()
				{
					string[] files = new string[] { "1.IIC200Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC201 ()
				{
					string[] files = new string[] { "1.IIC201Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC202 ()
				{
					string[] files = new string[] { "1.IIC202Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC203 ()
				{
					string[] files = new string[] { "1.IIC203Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC204 ()
				{
					string[] files = new string[] { "1.IIC204Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC205 ()
				{
					string[] files = new string[] { "1.IIC205Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC206 ()
				{
					string[] files = new string[] { "1.IIC206Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC207 ()
				{
					string[] files = new string[] { "1.IIC207Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC208 ()
				{
					string[] files = new string[] { "1.IIC208Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC209 ()
				{
					string[] files = new string[] { "1.IIC209Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC210 ()
				{
					string[] files = new string[] { "1.IIC210Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC211 ()
				{
					string[] files = new string[] { "1.IIC211Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC212 ()
				{
					string[] files = new string[] { "1.IIC212Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC213 ()
				{
					string[] files = new string[] { "1.IIC213Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC214 ()
				{
					string[] files = new string[] { "1.IIC214Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC215 ()
				{
					string[] files = new string[] { "1.IIC215Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC216 ()
				{
					string[] files = new string[] { "1.IIC216Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC217 ()
				{
					string[] files = new string[] { "1.IIC217Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC218 ()
				{
					string[] files = new string[] { "1.IIC218Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC219 ()
				{
					string[] files = new string[] { "1.IIC219Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC220 ()
				{
					string[] files = new string[] { "1.IIC220Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC221 ()
				{
					string[] files = new string[] { "1.IIC221Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC222 ()
				{
					string[] files = new string[] { "1.IIC222Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC223 ()
				{
					string[] files = new string[] { "1.IIC223Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC224 ()
				{
					string[] files = new string[] { "1.IIC224Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC225 ()
				{
					string[] files = new string[] { "1.IIC225Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC226 ()
				{
					string[] files = new string[] { "1.IIC226Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC227 ()
				{
					string[] files = new string[] { "1.IIC227Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC228 ()
				{
					string[] files = new string[] { "1.IIC228Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC229 ()
				{
					string[] files = new string[] { "1.IIC229Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC230 ()
				{
					string[] files = new string[] { "1.IIC230Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC231 ()
				{
					string[] files = new string[] { "1.IIC231Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIC232 ()
				{
					string[] files = new string[] { "1.IIC232Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID001 ()
				{
					string[] files = new string[] { "1.IID001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID002 ()
				{
					string[] files = new string[] { "1.IID002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID003 ()
				{
					string[] files = new string[] { "1.IID003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID004 ()
				{
					string[] files = new string[] { "1.IID004Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID005 ()
				{
					string[] files = new string[] { "1.IID005Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID006 ()
				{
					string[] files = new string[] { "1.IID006Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID007 ()
				{
					string[] files = new string[] { "1.IID007Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID008 ()
				{
					string[] files = new string[] { "1.IID008Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID009 ()
				{
					string[] files = new string[] { "1.IID009Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID010 ()
				{
					string[] files = new string[] { "1.IID010Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID011 ()
				{
					string[] files = new string[] { "1.IID011Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID012 ()
				{
					string[] files = new string[] { "1.IID012Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID013 ()
				{
					string[] files = new string[] { "1.IID013Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID014 ()
				{
					string[] files = new string[] { "1.IID014Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID015 ()
				{
					string[] files = new string[] { "1.IID015Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID016 ()
				{
					string[] files = new string[] { "1.IID016Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID017 ()
				{
					string[] files = new string[] { "1.IID017Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID018 ()
				{
					string[] files = new string[] { "1.IID018Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID019 ()
				{
					string[] files = new string[] { "1.IID019Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID020 ()
				{
					string[] files = new string[] { "1.IID020Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID021 ()
				{
					string[] files = new string[] { "1.IID021Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID022 ()
				{
					string[] files = new string[] { "1.IID022Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID023 ()
				{
					string[] files = new string[] { "1.IID023Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID024 ()
				{
					string[] files = new string[] { "1.IID024Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID025 ()
				{
					string[] files = new string[] { "1.IID025Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID026 ()
				{
					string[] files = new string[] { "1.IID026Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID027 ()
				{
					string[] files = new string[] { "1.IID027Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IID028 ()
				{
					string[] files = new string[] { "1.IID028Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIE001 ()
				{
					string[] files = new string[] { "1.IIE001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIE002 ()
				{
					string[] files = new string[] { "1.IIE002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIE003 ()
				{
					string[] files = new string[] { "1.IIE003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA001 ()
				{
					string[] files = new string[] { "1.IIIA001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA002 ()
				{
					string[] files = new string[] { "1.IIIA002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA003 ()
				{
					string[] files = new string[] { "1.IIIA003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA004 ()
				{
					string[] files = new string[] { "1.IIIA004Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA005 ()
				{
					string[] files = new string[] { "1.IIIA005Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA006 ()
				{
					string[] files = new string[] { "1.IIIA006Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA007 ()
				{
					string[] files = new string[] { "1.IIIA007Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA008 ()
				{
					string[] files = new string[] { "1.IIIA008Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA009 ()
				{
					string[] files = new string[] { "1.IIIA009Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA010 ()
				{
					string[] files = new string[] { "1.IIIA010Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA011 ()
				{
					string[] files = new string[] { "1.IIIA011Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA012 ()
				{
					string[] files = new string[] { "1.IIIA012Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA013 ()
				{
					string[] files = new string[] { "1.IIIA013Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA014 ()
				{
					string[] files = new string[] { "1.IIIA014Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA015 ()
				{
					string[] files = new string[] { "1.IIIA015Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA016 ()
				{
					string[] files = new string[] { "1.IIIA016Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA017 ()
				{
					string[] files = new string[] { "1.IIIA017Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA018 ()
				{
					string[] files = new string[] { "1.IIIA018Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA019 ()
				{
					string[] files = new string[] { "1.IIIA019Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA020 ()
				{
					string[] files = new string[] { "1.IIIA020Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA021 ()
				{
					string[] files = new string[] { "1.IIIA021Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA022 ()
				{
					string[] files = new string[] { "1.IIIA022Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA023 ()
				{
					string[] files = new string[] { "1.IIIA023Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA024 ()
				{
					string[] files = new string[] { "1.IIIA024Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA025 ()
				{
					string[] files = new string[] { "1.IIIA025Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA026 ()
				{
					string[] files = new string[] { "1.IIIA026Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA027 ()
				{
					string[] files = new string[] { "1.IIIA027Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIA028 ()
				{
					string[] files = new string[] { "1.IIIA028Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIC001 ()
				{
					string[] files = new string[] { "1.IIIC001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIC002 ()
				{
					string[] files = new string[] { "1.IIIC002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIC003 ()
				{
					string[] files = new string[] { "1.IIIC003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIF001 ()
				{
					string[] files = new string[] { "1.IIIF001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIF002 ()
				{
					string[] files = new string[] { "1.IIIF002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIF003 ()
				{
					string[] files = new string[] { "1.IIIF003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIF004 ()
				{
					string[] files = new string[] { "1.IIIF004Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
                [Ignore(".NET does not support XPath 2.0, this test will fail")]
				public void IIIF005 ()
				{
					string[] files = new string[] { "1.IIIF005Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIF006 ()
				{
					string[] files = new string[] { "1.IIIF006Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIF007 ()
				{
					string[] files = new string[] { "1.IIIF007Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIG001 ()
				{
					string[] files = new string[] { "1.IIIG001Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIG002 ()
				{
					string[] files = new string[] { "1.IIIG002Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIG003 ()
				{
					string[] files = new string[] { "1.IIIG003Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIG004 ()
				{
					string[] files = new string[] { "1.IIIG004Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIG005 ()
				{
					string[] files = new string[] { "1.IIIG005Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
				[Test]
				public void IIIG006 ()
				{
					string[] files = new string[] { "1.IIIG006Policy.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo policyFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( policyFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Policy
						PolicyDocumentReadWrite policyDocument = PolicyLoader.LoadPolicyDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						if( policyDocument.Policy == null ) 
						{
							policyDocument.PolicySet.Description = "UnitTest!!";
						}
						else
						{
							policyDocument.Policy.Description = "UnitTest!!";
						}
						policyDocument.WriteDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							PolicyDocument newPd = (PolicyDocument)PolicyLoader.LoadPolicyDocument( fs1, XacmlVersion.Version11, DocumentAccess.ReadOnly );
						
							if( newPd.Policy == null ) 
							{
								NUnit.Framework.Assert.AreEqual( newPd.PolicySet.Description, policyDocument.PolicySet.Description );
							}
							else
							{
								NUnit.Framework.Assert.AreEqual( newPd.Policy.Description, policyDocument.Policy.Description );
							}
						}
					}
				}
			}

			[TestFixture]
			public class ContextTests
			{
				public ContextTests()
				{
				}
				[Test]
				public void IIA001 ()
				{
					string[] files = new string[] { "1.IIA001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA002 ()
				{
					string[] files = new string[] { "1.IIA002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA003 ()
				{
					string[] files = new string[] { "1.IIA003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA004 ()
				{
					string[] files = new string[] { "1.IIA004Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA005 ()
				{
					string[] files = new string[] { "1.IIA005Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA006 ()
				{
					string[] files = new string[] { "1.IIA006Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA007 ()
				{
					string[] files = new string[] { "1.IIA007Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA008 ()
				{
					string[] files = new string[] { "1.IIA008Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA009 ()
				{
					string[] files = new string[] { "1.IIA009Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA010 ()
				{
					string[] files = new string[] { "1.IIA010Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA011 ()
				{
					string[] files = new string[] { "1.IIA011Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA012 ()
				{
					string[] files = new string[] { "1.IIA012Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA013 ()
				{
					string[] files = new string[] { "1.IIA013Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA014 ()
				{
					string[] files = new string[] { "1.IIA014Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA015 ()
				{
					string[] files = new string[] { "1.IIA015Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA016 ()
				{
					string[] files = new string[] { "1.IIA016Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA017 ()
				{
					string[] files = new string[] { "1.IIA017Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA018 ()
				{
					string[] files = new string[] { "1.IIA018Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA019 ()
				{
					string[] files = new string[] { "1.IIA019Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA020 ()
				{
					string[] files = new string[] { "1.IIA020Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIA021 ()
				{
					string[] files = new string[] { "1.IIA021Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB001 ()
				{
					string[] files = new string[] { "1.IIB001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB002 ()
				{
					string[] files = new string[] { "1.IIB002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB003 ()
				{
					string[] files = new string[] { "1.IIB003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB004 ()
				{
					string[] files = new string[] { "1.IIB004Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB005 ()
				{
					string[] files = new string[] { "1.IIB005Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB006 ()
				{
					string[] files = new string[] { "1.IIB006Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB007 ()
				{
					string[] files = new string[] { "1.IIB007Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB008 ()
				{
					string[] files = new string[] { "1.IIB008Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB009 ()
				{
					string[] files = new string[] { "1.IIB009Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB010 ()
				{
					string[] files = new string[] { "1.IIB010Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB011 ()
				{
					string[] files = new string[] { "1.IIB011Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB012 ()
				{
					string[] files = new string[] { "1.IIB012Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB013 ()
				{
					string[] files = new string[] { "1.IIB013Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB014 ()
				{
					string[] files = new string[] { "1.IIB014Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB015 ()
				{
					string[] files = new string[] { "1.IIB015Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB016 ()
				{
					string[] files = new string[] { "1.IIB016Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB017 ()
				{
					string[] files = new string[] { "1.IIB017Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB018 ()
				{
					string[] files = new string[] { "1.IIB018Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB019 ()
				{
					string[] files = new string[] { "1.IIB019Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB020 ()
				{
					string[] files = new string[] { "1.IIB020Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB021 ()
				{
					string[] files = new string[] { "1.IIB021Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB022 ()
				{
					string[] files = new string[] { "1.IIB022Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB023 ()
				{
					string[] files = new string[] { "1.IIB023Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB024 ()
				{
					string[] files = new string[] { "1.IIB024Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB025 ()
				{
					string[] files = new string[] { "1.IIB025Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB026 ()
				{
					string[] files = new string[] { "1.IIB026Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB027 ()
				{
					string[] files = new string[] { "1.IIB027Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB028 ()
				{
					string[] files = new string[] { "1.IIB028Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB029 ()
				{
					string[] files = new string[] { "1.IIB029Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB030 ()
				{
					string[] files = new string[] { "1.IIB030Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB031 ()
				{
					string[] files = new string[] { "1.IIB031Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB032 ()
				{
					string[] files = new string[] { "1.IIB032Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB033 ()
				{
					string[] files = new string[] { "1.IIB033Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB034 ()
				{
					string[] files = new string[] { "1.IIB034Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB035 ()
				{
					string[] files = new string[] { "1.IIB035Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB036 ()
				{
					string[] files = new string[] { "1.IIB036Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB037 ()
				{
					string[] files = new string[] { "1.IIB037Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB038 ()
				{
					string[] files = new string[] { "1.IIB038Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB039 ()
				{
					string[] files = new string[] { "1.IIB039Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB040 ()
				{
					string[] files = new string[] { "1.IIB040Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB041 ()
				{
					string[] files = new string[] { "1.IIB041Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB042 ()
				{
					string[] files = new string[] { "1.IIB042Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB043 ()
				{
					string[] files = new string[] { "1.IIB043Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB044 ()
				{
					string[] files = new string[] { "1.IIB044Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB045 ()
				{
					string[] files = new string[] { "1.IIB045Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB046 ()
				{
					string[] files = new string[] { "1.IIB046Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB047 ()
				{
					string[] files = new string[] { "1.IIB047Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB048 ()
				{
					string[] files = new string[] { "1.IIB048Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB049 ()
				{
					string[] files = new string[] { "1.IIB049Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB050 ()
				{
					string[] files = new string[] { "1.IIB050Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB051 ()
				{
					string[] files = new string[] { "1.IIB051Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB052 ()
				{
					string[] files = new string[] { "1.IIB052Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIB053 ()
				{
					string[] files = new string[] { "1.IIB053Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC001 ()
				{
					string[] files = new string[] { "1.IIC001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC002 ()
				{
					string[] files = new string[] { "1.IIC002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC003 ()
				{
					string[] files = new string[] { "1.IIC003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC004 ()
				{
					string[] files = new string[] { "1.IIC004Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC005 ()
				{
					string[] files = new string[] { "1.IIC005Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC006 ()
				{
					string[] files = new string[] { "1.IIC006Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC007 ()
				{
					string[] files = new string[] { "1.IIC007Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC008 ()
				{
					string[] files = new string[] { "1.IIC008Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC009 ()
				{
					string[] files = new string[] { "1.IIC009Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC010 ()
				{
					string[] files = new string[] { "1.IIC010Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC011 ()
				{
					string[] files = new string[] { "1.IIC011Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC012 ()
				{
					string[] files = new string[] { "1.IIC012Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC013 ()
				{
					string[] files = new string[] { "1.IIC013Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC014 ()
				{
					string[] files = new string[] { "1.IIC014Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC015 ()
				{
					string[] files = new string[] { "1.IIC015Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC016 ()
				{
					string[] files = new string[] { "1.IIC016Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC017 ()
				{
					string[] files = new string[] { "1.IIC017Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC018 ()
				{
					string[] files = new string[] { "1.IIC018Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC019 ()
				{
					string[] files = new string[] { "1.IIC019Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC020 ()
				{
					string[] files = new string[] { "1.IIC020Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC021 ()
				{
					string[] files = new string[] { "1.IIC021Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC022 ()
				{
					string[] files = new string[] { "1.IIC022Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC024 ()
				{
					string[] files = new string[] { "1.IIC024Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC025 ()
				{
					string[] files = new string[] { "1.IIC025Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC026 ()
				{
					string[] files = new string[] { "1.IIC026Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC027 ()
				{
					string[] files = new string[] { "1.IIC027Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC028 ()
				{
					string[] files = new string[] { "1.IIC028Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC029 ()
				{
					string[] files = new string[] { "1.IIC029Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC030 ()
				{
					string[] files = new string[] { "1.IIC030Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC031 ()
				{
					string[] files = new string[] { "1.IIC031Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC032 ()
				{
					string[] files = new string[] { "1.IIC032Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC033 ()
				{
					string[] files = new string[] { "1.IIC033Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC034 ()
				{
					string[] files = new string[] { "1.IIC034Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC035 ()
				{
					string[] files = new string[] { "1.IIC035Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC036 ()
				{
					string[] files = new string[] { "1.IIC036Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC037 ()
				{
					string[] files = new string[] { "1.IIC037Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC038 ()
				{
					string[] files = new string[] { "1.IIC038Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC039 ()
				{
					string[] files = new string[] { "1.IIC039Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC040 ()
				{
					string[] files = new string[] { "1.IIC040Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC041 ()
				{
					string[] files = new string[] { "1.IIC041Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC042 ()
				{
					string[] files = new string[] { "1.IIC042Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC043 ()
				{
					string[] files = new string[] { "1.IIC043Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC044 ()
				{
					string[] files = new string[] { "1.IIC044Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC045 ()
				{
					string[] files = new string[] { "1.IIC045Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC046 ()
				{
					string[] files = new string[] { "1.IIC046Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC047 ()
				{
					string[] files = new string[] { "1.IIC047Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC048 ()
				{
					string[] files = new string[] { "1.IIC048Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC049 ()
				{
					string[] files = new string[] { "1.IIC049Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC050 ()
				{
					string[] files = new string[] { "1.IIC050Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC051 ()
				{
					string[] files = new string[] { "1.IIC051Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC052 ()
				{
					string[] files = new string[] { "1.IIC052Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC053 ()
				{
					string[] files = new string[] { "1.IIC053Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC056 ()
				{
					string[] files = new string[] { "1.IIC056Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC057 ()
				{
					string[] files = new string[] { "1.IIC057Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC058 ()
				{
					string[] files = new string[] { "1.IIC058Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC059 ()
				{
					string[] files = new string[] { "1.IIC059Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC060 ()
				{
					string[] files = new string[] { "1.IIC060Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC061 ()
				{
					string[] files = new string[] { "1.IIC061Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC062 ()
				{
					string[] files = new string[] { "1.IIC062Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC063 ()
				{
					string[] files = new string[] { "1.IIC063Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC064 ()
				{
					string[] files = new string[] { "1.IIC064Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC065 ()
				{
					string[] files = new string[] { "1.IIC065Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC066 ()
				{
					string[] files = new string[] { "1.IIC066Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC067 ()
				{
					string[] files = new string[] { "1.IIC067Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC068 ()
				{
					string[] files = new string[] { "1.IIC068Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC069 ()
				{
					string[] files = new string[] { "1.IIC069Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC070 ()
				{
					string[] files = new string[] { "1.IIC070Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC071 ()
				{
					string[] files = new string[] { "1.IIC071Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC072 ()
				{
					string[] files = new string[] { "1.IIC072Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC073 ()
				{
					string[] files = new string[] { "1.IIC073Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC074 ()
				{
					string[] files = new string[] { "1.IIC074Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC075 ()
				{
					string[] files = new string[] { "1.IIC075Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC076 ()
				{
					string[] files = new string[] { "1.IIC076Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC077 ()
				{
					string[] files = new string[] { "1.IIC077Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC078 ()
				{
					string[] files = new string[] { "1.IIC078Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC079 ()
				{
					string[] files = new string[] { "1.IIC079Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC080 ()
				{
					string[] files = new string[] { "1.IIC080Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC081 ()
				{
					string[] files = new string[] { "1.IIC081Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC082 ()
				{
					string[] files = new string[] { "1.IIC082Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC083 ()
				{
					string[] files = new string[] { "1.IIC083Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC084 ()
				{
					string[] files = new string[] { "1.IIC084Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC085 ()
				{
					string[] files = new string[] { "1.IIC085Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC086 ()
				{
					string[] files = new string[] { "1.IIC086Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC087 ()
				{
					string[] files = new string[] { "1.IIC087Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC090 ()
				{
					string[] files = new string[] { "1.IIC090Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC091 ()
				{
					string[] files = new string[] { "1.IIC091Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC094 ()
				{
					string[] files = new string[] { "1.IIC094Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC095 ()
				{
					string[] files = new string[] { "1.IIC095Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC096 ()
				{
					string[] files = new string[] { "1.IIC096Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC097 ()
				{
					string[] files = new string[] { "1.IIC097Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC100 ()
				{
					string[] files = new string[] { "1.IIC100Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC101 ()
				{
					string[] files = new string[] { "1.IIC101Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC102 ()
				{
					string[] files = new string[] { "1.IIC102Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC103 ()
				{
					string[] files = new string[] { "1.IIC103Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC104 ()
				{
					string[] files = new string[] { "1.IIC104Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC105 ()
				{
					string[] files = new string[] { "1.IIC105Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC106 ()
				{
					string[] files = new string[] { "1.IIC106Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC107 ()
				{
					string[] files = new string[] { "1.IIC107Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC108 ()
				{
					string[] files = new string[] { "1.IIC108Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC109 ()
				{
					string[] files = new string[] { "1.IIC109Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC110 ()
				{
					string[] files = new string[] { "1.IIC110Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC111 ()
				{
					string[] files = new string[] { "1.IIC111Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC112 ()
				{
					string[] files = new string[] { "1.IIC112Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC113 ()
				{
					string[] files = new string[] { "1.IIC113Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC114 ()
				{
					string[] files = new string[] { "1.IIC114Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC115 ()
				{
					string[] files = new string[] { "1.IIC115Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC116 ()
				{
					string[] files = new string[] { "1.IIC116Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC117 ()
				{
					string[] files = new string[] { "1.IIC117Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC118 ()
				{
					string[] files = new string[] { "1.IIC118Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC119 ()
				{
					string[] files = new string[] { "1.IIC119Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC120 ()
				{
					string[] files = new string[] { "1.IIC120Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC121 ()
				{
					string[] files = new string[] { "1.IIC121Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC122 ()
				{
					string[] files = new string[] { "1.IIC122Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC123 ()
				{
					string[] files = new string[] { "1.IIC123Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC124 ()
				{
					string[] files = new string[] { "1.IIC124Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC125 ()
				{
					string[] files = new string[] { "1.IIC125Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC126 ()
				{
					string[] files = new string[] { "1.IIC126Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC127 ()
				{
					string[] files = new string[] { "1.IIC127Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC128 ()
				{
					string[] files = new string[] { "1.IIC128Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC129 ()
				{
					string[] files = new string[] { "1.IIC129Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC130 ()
				{
					string[] files = new string[] { "1.IIC130Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC131 ()
				{
					string[] files = new string[] { "1.IIC131Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC132 ()
				{
					string[] files = new string[] { "1.IIC132Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC133 ()
				{
					string[] files = new string[] { "1.IIC133Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC134 ()
				{
					string[] files = new string[] { "1.IIC134Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC135 ()
				{
					string[] files = new string[] { "1.IIC135Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC136 ()
				{
					string[] files = new string[] { "1.IIC136Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC137 ()
				{
					string[] files = new string[] { "1.IIC137Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC138 ()
				{
					string[] files = new string[] { "1.IIC138Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC139 ()
				{
					string[] files = new string[] { "1.IIC139Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC140 ()
				{
					string[] files = new string[] { "1.IIC140Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC141 ()
				{
					string[] files = new string[] { "1.IIC141Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC142 ()
				{
					string[] files = new string[] { "1.IIC142Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC143 ()
				{
					string[] files = new string[] { "1.IIC143Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC144 ()
				{
					string[] files = new string[] { "1.IIC144Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC145 ()
				{
					string[] files = new string[] { "1.IIC145Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC146 ()
				{
					string[] files = new string[] { "1.IIC146Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC147 ()
				{
					string[] files = new string[] { "1.IIC147Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC148 ()
				{
					string[] files = new string[] { "1.IIC148Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC149 ()
				{
					string[] files = new string[] { "1.IIC149Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC150 ()
				{
					string[] files = new string[] { "1.IIC150Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC151 ()
				{
					string[] files = new string[] { "1.IIC151Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC152 ()
				{
					string[] files = new string[] { "1.IIC152Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC153 ()
				{
					string[] files = new string[] { "1.IIC153Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC154 ()
				{
					string[] files = new string[] { "1.IIC154Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC155 ()
				{
					string[] files = new string[] { "1.IIC155Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC156 ()
				{
					string[] files = new string[] { "1.IIC156Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC157 ()
				{
					string[] files = new string[] { "1.IIC157Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC158 ()
				{
					string[] files = new string[] { "1.IIC158Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC159 ()
				{
					string[] files = new string[] { "1.IIC159Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC160 ()
				{
					string[] files = new string[] { "1.IIC160Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC161 ()
				{
					string[] files = new string[] { "1.IIC161Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC162 ()
				{
					string[] files = new string[] { "1.IIC162Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC163 ()
				{
					string[] files = new string[] { "1.IIC163Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC164 ()
				{
					string[] files = new string[] { "1.IIC164Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC165 ()
				{
					string[] files = new string[] { "1.IIC165Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC166 ()
				{
					string[] files = new string[] { "1.IIC166Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC167 ()
				{
					string[] files = new string[] { "1.IIC167Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC168a ()
				{
					string[] files = new string[] { "1.IIC168aRequest.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC168 ()
				{
					string[] files = new string[] { "1.IIC168Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC169 ()
				{
					string[] files = new string[] { "1.IIC169Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC170 ()
				{
					string[] files = new string[] { "1.IIC170Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC171 ()
				{
					string[] files = new string[] { "1.IIC171Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC172 ()
				{
					string[] files = new string[] { "1.IIC172Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC173 ()
				{
					string[] files = new string[] { "1.IIC173Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC174 ()
				{
					string[] files = new string[] { "1.IIC174Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC175 ()
				{
					string[] files = new string[] { "1.IIC175Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC176 ()
				{
					string[] files = new string[] { "1.IIC176Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC177 ()
				{
					string[] files = new string[] { "1.IIC177Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC178 ()
				{
					string[] files = new string[] { "1.IIC178Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC179 ()
				{
					string[] files = new string[] { "1.IIC179Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC180 ()
				{
					string[] files = new string[] { "1.IIC180Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC181 ()
				{
					string[] files = new string[] { "1.IIC181Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC182 ()
				{
					string[] files = new string[] { "1.IIC182Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC183 ()
				{
					string[] files = new string[] { "1.IIC183Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC184 ()
				{
					string[] files = new string[] { "1.IIC184Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC185 ()
				{
					string[] files = new string[] { "1.IIC185Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC186 ()
				{
					string[] files = new string[] { "1.IIC186Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC187 ()
				{
					string[] files = new string[] { "1.IIC187Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC188 ()
				{
					string[] files = new string[] { "1.IIC188Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC189 ()
				{
					string[] files = new string[] { "1.IIC189Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC190 ()
				{
					string[] files = new string[] { "1.IIC190Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC191 ()
				{
					string[] files = new string[] { "1.IIC191Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC192 ()
				{
					string[] files = new string[] { "1.IIC192Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC193 ()
				{
					string[] files = new string[] { "1.IIC193Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC194 ()
				{
					string[] files = new string[] { "1.IIC194Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC195 ()
				{
					string[] files = new string[] { "1.IIC195Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC196 ()
				{
					string[] files = new string[] { "1.IIC196Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC197 ()
				{
					string[] files = new string[] { "1.IIC197Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC198 ()
				{
					string[] files = new string[] { "1.IIC198Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC199 ()
				{
					string[] files = new string[] { "1.IIC199Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC200 ()
				{
					string[] files = new string[] { "1.IIC200Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC201 ()
				{
					string[] files = new string[] { "1.IIC201Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC202 ()
				{
					string[] files = new string[] { "1.IIC202Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC203 ()
				{
					string[] files = new string[] { "1.IIC203Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC204 ()
				{
					string[] files = new string[] { "1.IIC204Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC205 ()
				{
					string[] files = new string[] { "1.IIC205Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC206 ()
				{
					string[] files = new string[] { "1.IIC206Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC207 ()
				{
					string[] files = new string[] { "1.IIC207Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC208 ()
				{
					string[] files = new string[] { "1.IIC208Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC209 ()
				{
					string[] files = new string[] { "1.IIC209Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC210 ()
				{
					string[] files = new string[] { "1.IIC210Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC211 ()
				{
					string[] files = new string[] { "1.IIC211Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC212 ()
				{
					string[] files = new string[] { "1.IIC212Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC213 ()
				{
					string[] files = new string[] { "1.IIC213Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC214 ()
				{
					string[] files = new string[] { "1.IIC214Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC215 ()
				{
					string[] files = new string[] { "1.IIC215Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC216 ()
				{
					string[] files = new string[] { "1.IIC216Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC217 ()
				{
					string[] files = new string[] { "1.IIC217Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC218 ()
				{
					string[] files = new string[] { "1.IIC218Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC219 ()
				{
					string[] files = new string[] { "1.IIC219Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC220 ()
				{
					string[] files = new string[] { "1.IIC220Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC221 ()
				{
					string[] files = new string[] { "1.IIC221Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC222 ()
				{
					string[] files = new string[] { "1.IIC222Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC223 ()
				{
					string[] files = new string[] { "1.IIC223Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC224 ()
				{
					string[] files = new string[] { "1.IIC224Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC225 ()
				{
					string[] files = new string[] { "1.IIC225Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC226 ()
				{
					string[] files = new string[] { "1.IIC226Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC227 ()
				{
					string[] files = new string[] { "1.IIC227Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC228 ()
				{
					string[] files = new string[] { "1.IIC228Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC229 ()
				{
					string[] files = new string[] { "1.IIC229Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC230 ()
				{
					string[] files = new string[] { "1.IIC230Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC231 ()
				{
					string[] files = new string[] { "1.IIC231Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIC232 ()
				{
					string[] files = new string[] { "1.IIC232Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID001 ()
				{
					string[] files = new string[] { "1.IID001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID002 ()
				{
					string[] files = new string[] { "1.IID002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID003 ()
				{
					string[] files = new string[] { "1.IID003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID004 ()
				{
					string[] files = new string[] { "1.IID004Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID005 ()
				{
					string[] files = new string[] { "1.IID005Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID006 ()
				{
					string[] files = new string[] { "1.IID006Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID007 ()
				{
					string[] files = new string[] { "1.IID007Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID008 ()
				{
					string[] files = new string[] { "1.IID008Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID009 ()
				{
					string[] files = new string[] { "1.IID009Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID010 ()
				{
					string[] files = new string[] { "1.IID010Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID011 ()
				{
					string[] files = new string[] { "1.IID011Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID012 ()
				{
					string[] files = new string[] { "1.IID012Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID013 ()
				{
					string[] files = new string[] { "1.IID013Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID014 ()
				{
					string[] files = new string[] { "1.IID014Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID015 ()
				{
					string[] files = new string[] { "1.IID015Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID016 ()
				{
					string[] files = new string[] { "1.IID016Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID017 ()
				{
					string[] files = new string[] { "1.IID017Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID018 ()
				{
					string[] files = new string[] { "1.IID018Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID019 ()
				{
					string[] files = new string[] { "1.IID019Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID020 ()
				{
					string[] files = new string[] { "1.IID020Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID021 ()
				{
					string[] files = new string[] { "1.IID021Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID022 ()
				{
					string[] files = new string[] { "1.IID022Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID023 ()
				{
					string[] files = new string[] { "1.IID023Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID024 ()
				{
					string[] files = new string[] { "1.IID024Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID025 ()
				{
					string[] files = new string[] { "1.IID025Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID026 ()
				{
					string[] files = new string[] { "1.IID026Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID027 ()
				{
					string[] files = new string[] { "1.IID027Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID028 ()
				{
					string[] files = new string[] { "1.IID028Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID029 ()
				{
					string[] files = new string[] { "1.IID029Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IID030 ()
				{
					string[] files = new string[] { "1.IID030Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIE001 ()
				{
					string[] files = new string[] { "1.IIE001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIE002 ()
				{
					string[] files = new string[] { "1.IIE002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIE003 ()
				{
					string[] files = new string[] { "1.IIE003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA001 ()
				{
					string[] files = new string[] { "1.IIIA001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA002 ()
				{
					string[] files = new string[] { "1.IIIA002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA003 ()
				{
					string[] files = new string[] { "1.IIIA003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA004 ()
				{
					string[] files = new string[] { "1.IIIA004Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA005 ()
				{
					string[] files = new string[] { "1.IIIA005Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA006 ()
				{
					string[] files = new string[] { "1.IIIA006Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA007 ()
				{
					string[] files = new string[] { "1.IIIA007Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA008 ()
				{
					string[] files = new string[] { "1.IIIA008Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA009 ()
				{
					string[] files = new string[] { "1.IIIA009Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA010 ()
				{
					string[] files = new string[] { "1.IIIA010Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA011 ()
				{
					string[] files = new string[] { "1.IIIA011Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA012 ()
				{
					string[] files = new string[] { "1.IIIA012Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA013 ()
				{
					string[] files = new string[] { "1.IIIA013Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA014 ()
				{
					string[] files = new string[] { "1.IIIA014Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA015 ()
				{
					string[] files = new string[] { "1.IIIA015Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA016 ()
				{
					string[] files = new string[] { "1.IIIA016Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA017 ()
				{
					string[] files = new string[] { "1.IIIA017Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA018 ()
				{
					string[] files = new string[] { "1.IIIA018Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA019 ()
				{
					string[] files = new string[] { "1.IIIA019Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA020 ()
				{
					string[] files = new string[] { "1.IIIA020Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA021 ()
				{
					string[] files = new string[] { "1.IIIA021Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA022 ()
				{
					string[] files = new string[] { "1.IIIA022Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA023 ()
				{
					string[] files = new string[] { "1.IIIA023Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA024 ()
				{
					string[] files = new string[] { "1.IIIA024Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA025 ()
				{
					string[] files = new string[] { "1.IIIA025Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA026 ()
				{
					string[] files = new string[] { "1.IIIA026Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA027 ()
				{
					string[] files = new string[] { "1.IIIA027Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIA028 ()
				{
					string[] files = new string[] { "1.IIIA028Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIC001 ()
				{
					string[] files = new string[] { "1.IIIC001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIC002 ()
				{
					string[] files = new string[] { "1.IIIC002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIC003 ()
				{
					string[] files = new string[] { "1.IIIC003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIF001 ()
				{
					string[] files = new string[] { "1.IIIF001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIF002 ()
				{
					string[] files = new string[] { "1.IIIF002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIF003 ()
				{
					string[] files = new string[] { "1.IIIF003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIF004 ()
				{
					string[] files = new string[] { "1.IIIF004Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIF005 ()
				{
					string[] files = new string[] { "1.IIIF005Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIF006 ()
				{
					string[] files = new string[] { "1.IIIF006Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIF007 ()
				{
					string[] files = new string[] { "1.IIIF007Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIG001 ()
				{
					string[] files = new string[] { "1.IIIG001Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIG002 ()
				{
					string[] files = new string[] { "1.IIIG002Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIG003 ()
				{
					string[] files = new string[] { "1.IIIG003Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIG004 ()
				{
					string[] files = new string[] { "1.IIIG004Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIG005 ()
				{
					string[] files = new string[] { "1.IIIG005Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
				[Test]
				public void IIIG006 ()
				{
					string[] files = new string[] { "1.IIIG006Request.xml" };
					string tempFile = Path.GetTempFileName();
					XmlTextWriter tw = new XmlTextWriter( tempFile, System.Text.Encoding.ASCII );
					tw.Namespaces = true;
					tw.Formatting = Formatting.Indented;

					FileInfo requestFile = new FileInfo( files[0] );
					using( FileStream fs = new FileStream( requestFile.FullName, FileMode.Open, FileAccess.Read ) )
					{
						// Load Request
						ContextDocumentReadWrite contextDocument = ContextLoader.LoadContextDocument( fs, XacmlVersion.Version11, DocumentAccess.ReadWrite );

						contextDocument.Request.Action.Attributes[0].AttributeId = "UnitTest!!!";
					
						contextDocument.WriteRequestDocument( tw );
						tw.Close();

						using( FileStream fs1 = new FileStream( tempFile, FileMode.Open, FileAccess.Read ) )
						{
							ContextDocument newCon = (ContextDocument)ContextLoader.LoadContextDocument( fs1, XacmlVersion.Version11 );
						
							NUnit.Framework.Assert.AreEqual( newCon.Request.Action.Attributes[0].AttributeId, contextDocument.Request.Action.Attributes[0].AttributeId );
						}
					}
				}
			}
		}
	}
}
